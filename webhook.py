import os
import json
import time
import hmac
import hashlib
import logging
import re
import random
import threading
from typing import Dict, Iterable, Tuple
from flask import Flask, request, abort, jsonify

# === Importurile tale existente pentru trimitere mesaje/replies ===
from send_message import (
    send_instagram_message,           # DM to user_id
    reply_public_to_comment,          # public ack under comment (dacƒÉ platforma permite)
    send_instagram_images,            # pentru galeria de imagini

)

# === Customer capture integration (non-breaking) ===
try:
    from customer_capture.integrations.flask_hook import process_customer_message
    CUSTOMER_CAPTURE_ENABLED = True
except ImportError:
    CUSTOMER_CAPTURE_ENABLED = False
    logging.warning("Customer capture module not available")
app = Flask(__name__, static_folder="static", static_url_path="/static")
logging.basicConfig(level=logging.INFO)

# === ENV (exact ca √Æn Railway) ===
VERIFY_TOKEN = os.getenv("IG_VERIFY_TOKEN", "").strip()
APP_SECRET   = os.getenv("IG_APP_SECRET", "").strip()  # op»õional, pentru semnƒÉturƒÉ
MY_IG_USER_ID = os.getenv("IG_ID", "").strip()
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "").strip()

# === Dedup DM (MID) ‚Äî 5 minute ===
SEEN_MIDS: Dict[str, float] = {}
DEDUP_TTL_SEC = 300

# === Anti-spam ofertƒÉ (o singurƒÉ replicƒÉ per user √Æntr-un interval) ===
OFFER_COOLDOWN_SEC = int(os.getenv("OFFER_COOLDOWN_SEC", "180"))  # default 3 min
LAST_OFFER_AT: Dict[str, float] = {}  # sender_id -> epoch

# === Dedup comentarii ‚Äî 1 orƒÉ ===
PROCESSED_COMMENTS: Dict[str, float] = {}
COMMENT_TTL = 3600  # 1 orƒÉ √Æn secunde

# Separate anti-spam for different payment question types
PAYMENT_GENERAL_REPLIED: Dict[str, float] = {}  # General payment questions
ADVANCE_AMOUNT_REPLIED: Dict[str, float] = {}  # Amount questions  
ADVANCE_METHOD_REPLIED: Dict[str, float] = {}  # Method questions
PAYMENT_TTL_SEC = 2 * 60  # 2 minutes for each type

REPLY_DELAY_MIN_SEC = float(os.getenv("REPLY_DELAY_MIN_SEC", "4.0"))
REPLY_DELAY_MAX_SEC = float(os.getenv("REPLY_DELAY_MAX_SEC", "7.0"))

# === Texte ofertƒÉ ===
OFFER_TEXT_RO = (
    
    "VƒÉ putem propune douƒÉ tipuri de lƒÉmpi personalizabile ‚Äì un cadou luminos »ôi plin de emo»õii\n\n"
    "LampƒÉ simplƒÉ ‚Äì orice model din profil cu design gata fƒÉcut,\npersonalizabil prin textul dorit la pre»õ de 699 MDL\n\n"
    "LampƒÉ dupƒÉ pozƒÉ üì∏  ‚Äì personalizabilƒÉ complet dupƒÉ preferin»õele dumneavoastrƒÉ: poza aleasƒÉ, text, elemente de design individuale, modificƒÉri √Æn desen la pre»õ de 779 MDL\n\n"
    "üí° Ambele modele sunt multicolore ‚Äì au 16 culori diferite »ôi diverse moduri de iluminare ‚ú®,\ncare se schimbƒÉ foarte u»ôor prin telecomanda inclusƒÉ\n\n"
    "‚ö° Oferim »ôi garan»õie la toatƒÉ electronica, pentru ca sƒÉ vƒÉ bucura»õi de lampƒÉ √Æn siguran»õƒÉ »ôi fƒÉrƒÉ griji ‚ù§Ô∏è\n\n"
    "√émpachetƒÉm sub formƒÉ de cadou gratuitüéÅ\n\n"
    "üëâ Care dintre aceste modele vƒÉ place mai mult sau a»õi dori sƒÉ-l oferi»õi drept cadou unei persoane dragi? üéÅüíñ"
)
OFFER_TEXT_RU = (
   
    "‚ú® –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –í–∞–º –¥–≤–∞ –≤–∏–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∞–º–ø ‚Äì —è—Ä–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ üíñ\n\n"
    "–ü—Ä–æ—Å—Ç–∞—è –ª–∞–º–ø–∞ ‚Äì –ª—é–±–∞—è –º–æ–¥–µ–ª—å —Å –≥–æ—Ç–æ–≤—ã–º —Ä–∏—Å—É–Ω–∫–æ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è,\n–∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –ø–æ —Ü–µ–Ω–µ 699 MDL\n\n"
    "–õ–∞–º–ø–∞ –ø–æ —Ñ–æ—Ç–æ üì∏  ‚Äì –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º:\n–≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –≤ —Ä–∏—Å—É–Ω–∫–µ, –ø–æ —Ü–µ–Ω–µ 779 MDL\n\n"
    "üí° –û–±–µ –º–æ–¥–µ–ª–∏ –º–Ω–æ–≥–æ—Ü–≤–µ—Ç–Ω—ã–µ ‚Äì –∏–º–µ—é—Ç 16 —Ä–∞–∑–Ω—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ —Å–≤–µ—á–µ–Ω–∏—è ‚ú®,\n–∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ø—É–ª—å—Ç–∞ü•∞\n\n"
    "‚ö° –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ –≤—Å—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ª–∞–º–ø–æ–π —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑ –∑–∞–±–æ—Ç ‚ù§Ô∏è\n\n"
    "üéÅ –ö–∞–∂–¥—É—é –ª–∞–º–ø—É –º—ã —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –ø–æ–¥–∞—Ä–æ—á–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ\n\n"
    "–ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –º–æ–¥–µ–ª–µ–π –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É? üéÅüíñ"
)

# === Mesaj public scurt sub comentariu ===
ACK_PUBLIC_RO = "BunƒÉ üëã V-am rƒÉspuns √Æn privat üíå"
ACK_PUBLIC_RU = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–û—Ç–≤–µ—Ç–∏–ª–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üíå"

# === Offer intent (price/catalog/models/details) ‚Äî RO + RU extins ===
CYRILLIC_RE = re.compile(r"[\u0400-\u04FF]")

_SHORT_PRICE_RO = re.compile(r"\b(?:la\s+ce\s+)?pre[t»õ]\b", re.IGNORECASE)
_SHORT_PRICE_RU = re.compile(r"\b(?:—Ü–µ–Ω[–∞—É—ã–µ]|—Å–∫–æ–ª—å–∫–æ)\b", re.IGNORECASE)

# RO ‚Äî termeni legati de pret (mai specifici, fƒÉrƒÉ termeni generici)
RO_PRICE_TERMS = {
    "pret","pretul","preturi","pre»õul","pre»õ","pre»õuri","tarif","cost","costa","cat","cat e","cat este","cat costa",
    "cat vine","cat ajunge","care e pretul","aveti preturi","oferta","oferti","price",
    # Removed "aflu","afla" - too generic, causes false positives
}

# RO ‚Äî termeni de produs / categorie
RO_PRODUCT_TERMS = {
    "lampa","lampa","lampi","lampe","lampƒÉ","lampile","modele","modelele","model","catalog","neon",
    "pentru profesori","profesori","profesor","diriginte","dirigintei","diriginta",
    "cadou","cadoul","cadouri","gift","dar","daru","daruri",
}

# RO ‚Äî termeni de detalii / informatii
RO_DETAIL_TERMS = {
    "detalii","mai multe detalii","informatii","informa»õii","descriere","specificatii",
    "detalii despre","vreau detalii","doresc detalii","as dori detalii","as dori informatii",
    "doresc mai multe informatii","spune-mi mai multe","spuneti-mi mai multe","mai multe info",
}

# RO ‚Äî comparatori
RO_COMPARATORS = {
    "diferit","diferite","acelasi","acela»ôi","pentru orice","toate modelele","depinde de model",
}

# RU ‚Äî termeni legati de pret
RU_PRICE_TERMS = {
    "—Ü–µ–Ω–∞","—Ü–µ–Ω—É","—Ü–µ–Ω—ã","–ø—Ä–∞–π—Å","—Å—Ç–æ–∏–º–æ—Å—Ç—å","—Å–∫–æ–ª—å–∫–æ","—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç",
    "—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–∞","—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç","–ø–æ —á–µ–º","–ø–æ—á–µ–º","—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É",
    "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å","—Å–∫ —Å–∫–æ–ª—å–∫–æ",
}

# RU ‚Äî termeni de produs / categorie
RU_PRODUCT_TERMS = {
    "–ª–∞–º–ø–∞","–ª–∞–º–ø—ã","–º–æ–¥–µ–ª—å","–º–æ–¥–µ–ª–∏","–∫–∞—Ç–∞–ª–æ–≥","–¥–ª—è —É—á–∏—Ç–µ–ª—è","—É—á–∏—Ç–µ–ª—é","—É—á–∏—Ç–µ–ª—è–º","–Ω–µ–æ–Ω",
}

# RU ‚Äî detalii/informa»õii
RU_DETAIL_TERMS = {
    "–ø–æ–¥—Ä–æ–±–Ω–µ–µ","–¥–µ—Ç–∞–ª–∏","—Ö–æ—á—É –¥–µ—Ç–∞–ª–∏","—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ","–º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
    "–±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏","—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ","–∏–Ω—Ñ–æ","–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
}

# RU ‚Äî comparatori
RU_COMPARATORS = {
    "—Ä–∞–∑–Ω–∞—è","—Ä–∞–∑–Ω—ã–µ","–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è","–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Ü–µ–Ω–∞","–¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π","–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏",
}

# Expresii compuse (ancore clare)
RO_PRICE_REGEX = re.compile(
    r"(care\s+e\s+pretul|sunt\s+preturi\s+diferite|acelasi\s+pret|pret\s+pe\s+model|pret\s+pentru\s+orice\s+model|la\s+ce\s+pret)",
    re.IGNORECASE,
)
RU_PRICE_REGEX = re.compile(
    r"(—Ü–µ–Ω–∞\s+–¥–ª—è\s+–≤—Å–µ—Ö\s+–º–æ–¥–µ–ª–µ–π|—Ä–∞–∑–Ω–∞—è\s+—Ü–µ–Ω–∞|–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è\s+—Ü–µ–Ω–∞|—Ü–µ–Ω–∞\s+–∑–∞\s+–º–æ–¥–µ–ª—å|–º–æ–∂–Ω–æ\s+—É–∑–Ω–∞—Ç—å\s+—Ü–µ–Ω—É)",
    re.IGNORECASE,
)


ETA_TEXT = (
    "Lucrarea se elaboreazƒÉ timp de 3-4 zile lucrƒÉtoare\n\n"
    "Livrarea dureazƒÉ de la o zi p√¢nƒÉ la trei zile independent de metodƒÉ »ôi loca»õie\n\n"
    "A»õi avea nevoie de produs pentru o anumitƒÉ datƒÉ?\n\n"
    "Unde va trebui de livrat produsul?"
)

ETA_TEXT_RU = (
    "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 3-4 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è\n\n"
    "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª–∏—Ç—Å—è –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ —Ç—Ä—ë—Ö –¥–Ω–µ–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏\n\n"
    "–í–∞–º –Ω—É–∂–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –¥–∞—Ç–µ?\n\n"
    "–ö—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?"
)

# === Regex pentru √ÆntrebƒÉri despre timp/termen (RO + RU) ===
ETA_PATTERNS_RO = [
    r"\b√Æn\s+c[√¢a]t\s+timp\b",
    r"\bc[√¢a]t\s+se\s+(face|realizeaz[ƒÉa]|execut[ƒÉa])\b",
    r"\bcare\s+este\s+termenul\b",
    r"\btermen(ul)?\s+de\s+(realizare|executare)\b",
    r"\btermenii\s+de\s+realizare\b",
    r"\btermenii\s+de\s+executare\b",
    r"\b(timp|durat[ƒÉa])\s+de\s+executare\b",
    r"\b(timp|durat[ƒÉa])\s+de\s+realizare\b",
    # Additional patterns for common time questions
    r"\bin\s+c[√¢a]t\s+timp\s+este\s+gata\b",  # "in c√¢t timp este gata"
    r"\bc[√¢a]t\s+timp\s+este\s+gata\b",      # "c√¢t timp este gata"
    r"\bin\s+c[√¢a]t\s+timp\s+va\s+fi\s+gata\b",  # "in c√¢t timp va fi gata"
    r"\bc[√¢a]t\s+timp\s+va\s+fi\s+gata\b",      # "c√¢t timp va fi gata"
    r"\bin\s+c[√¢a]t\s+timp\s+se\s+face\b",     # "in c√¢t timp se face"
    r"\bc[√¢a]t\s+timp\s+se\s+face\b",         # "c√¢t timp se face"
    r"\bin\s+c[√¢a]t\s+timp\s+se\s+realizeaz[ƒÉa]\b",  # "in c√¢t timp se realizeazƒÉ"
    r"\bc[√¢a]t\s+timp\s+se\s+realizeaz[ƒÉa]\b",      # "c√¢t timp se realizeazƒÉ"
    r"\bin\s+c[√¢a]t\s+timp\s+se\s+execut[ƒÉa]\b",    # "in c√¢t timp se executƒÉ"
    r"\bc[√¢a]t\s+timp\s+se\s+execut[ƒÉa]\b",        # "c√¢t timp se executƒÉ"
    r"\beste\s+gata\b.*\bc[√¢a]t\s+timp\b",     # "este gata...c√¢t timp"
    r"\bva\s+fi\s+gata\b.*\bc[√¢a]t\s+timp\b",  # "va fi gata...c√¢t timp"
    r"\bse\s+face\b.*\bc[√¢a]t\s+timp\b",       # "se face...c√¢t timp"
    r"\bse\s+realizeaz[ƒÉa]\b.*\bc[√¢a]t\s+timp\b",  # "se realizeazƒÉ...c√¢t timp"
    r"\bse\s+execut[ƒÉa]\b.*\bc[√¢a]t\s+timp\b",     # "se executƒÉ...c√¢t timp"
    
    # Additional patterns from screenshots analysis
    r"\bmai\s+sunt\s+si\s+alte\s+preturi\b",       # mai sunt si alte preturi
    r"\bin\s+cate\s+zile\s+vine\b",                # in cate zile vine
    r"\bcel\s+t[√¢a]rziu\s+\w+\s+am\s+nevoie\b",    # cel t√¢rziu joi am nevoie
    r"\bin\s+cit\s+timp\s+realizati\b",            # in cit timp realizati
    r"\bin\s+c[√¢a]t\s+timp\s+ar\s+fi\s+gata\b",    # in c√¢t timp ar fi gata
    r"\bin\s+c[√¢a]t\s+timp\s+realizati\s+o\s+lampa\b", # in c√¢t timp realizati o lampa
    r"\bin\s+ce\s+timp\s+vine\s+comanda\b",        # √Æn ce timp vine comanda
    r"\bin\s+c[√¢a]nd\s+timp\s+vine\s+comanda\b",   # √Æn c√¢nd timp vine comanda
    r"\bpe\s+c[√¢a]nd\s+aveti\s+nevoie\b",          # pe c√¢nd ave»õi nevoie
    r"\bpe\s+\d+\s+\w+\s+daca\s+e\s+posibil\b",    # pe 4octombrie daca e posibil
    r"\bpreturi\b",                                 # preturi
    r"\bzile\s+vine\b",                            # zile vine
    r"\bt[√¢a]rziu\b",                              # t√¢rziu
    r"\bnevoie\s+de\s+ele\b",                      # nevoie de ele
    r"\brealizati\b",                              # realizati
    r"\blampa\b",                                  # lampa
    r"\bcomanda\b",                                # comanda
    r"\baveti\s+nevoie\b",                         # ave»õi nevoie
    r"\bdaca\s+e\s+posibil\b",                     # daca e posibil
    r"\bposibil\b",                                # posibil
]

ETA_PATTERNS_RU = [
    r"\b—á–µ—Ä–µ–∑\s+—Å–∫–æ–ª—å–∫–æ\b",
    r"\b—Å–∫–æ–ª—å–∫–æ\s+–¥–Ω(?:–µ–π|—è)\b",
    r"\b—Å—Ä–æ–∫(?:–∏)?\s+–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏[—è–µ]\b",
    r"\b–∑–∞\s+–∫–∞–∫–æ–µ\s+–≤—Ä–µ–º—è\b",
    # ‚Äî extinderi uzuale/colocviale ‚Äî
    r"\b—á—Ç–æ\s+–ø–æ\s+—Å—Ä–æ–∫–∞–º\??",                 # –ß—Ç–æ –ø–æ —Å—Ä–æ–∫–∞–º?
    r"\b–∫–∞–∫–∏–µ\s+—Å—Ä–æ–∫–∏\??",                     # –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏?
    r"\b–∫–∞–∫–∏–µ\s+—Å—Ä–æ–∫–∏\s+–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏[—è–µ]\??",   # –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è?
    r"\b–ø–æ\s+–≤—Ä–µ–º–µ–Ω–∏\s+–∫–∞–∫\??",                # –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫?
    r"\b–∫\s+–∫–∞–∫–æ–º[—É—ã]\s+—á–∏—Å–ª[—É—ã]\??",          # –ö –∫–∞–∫–æ–º—É —á–∏—Å–ª—É?
    r"\b—É—Å–ø–µ–µ—Ç[–µ]?\s+–∫\s+\d{1,2}\.?(\s*[–∞-—è]+)?",   # –£—Å–ø–µ–µ—Ç–µ –∫ 15/–∫ 15 –º–∞—è
    r"\b—Å—Ä–æ–∫[–∏]?\b",                           # –æ–¥–∏–Ω–æ—á–Ω–æ–µ ¬´—Å—Ä–æ–∫–∏?¬ª
    r"\b–ø–æ\s+—Å—Ä–æ–∫–∞–º\b",                        # ¬´–ø–æ —Å—Ä–æ–∫–∞–º¬ª
    # Additional patterns for common time questions
    r"\b–∑–∞\s+—Å–∫–æ–ª—å–∫–æ\s+–≤—Ä–µ–º–µ–Ω–∏\b",            # "–∑–∞ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏"
    r"\b—á–µ—Ä–µ–∑\s+—Å–∫–æ–ª—å–∫–æ\s+–≤—Ä–µ–º–µ–Ω–∏\b",          # "—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏"
    r"\b—Å–∫–æ–ª—å–∫–æ\s+–≤—Ä–µ–º–µ–Ω–∏\s+–Ω—É–∂–Ω–æ\b",         # "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ"
    r"\b—Å–∫–æ–ª—å–∫–æ\s+–≤—Ä–µ–º–µ–Ω–∏\s+–∑–∞–π–º–µ—Ç\b",        # "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç"
    r"\b—Å–∫–æ–ª—å–∫–æ\s+–≤—Ä–µ–º–µ–Ω–∏\s+–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è\b",   # "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è"
    r"\b–∑–∞\s+–∫–∞–∫–æ–µ\s+–≤—Ä–µ–º—è\s+–±—É–¥–µ—Ç\s+–≥–æ—Ç–æ–≤–æ\b", # "–∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ"
    r"\b—á–µ—Ä–µ–∑\s+–∫–∞–∫–æ–µ\s+–≤—Ä–µ–º—è\s+–±—É–¥–µ—Ç\s+–≥–æ—Ç–æ–≤–æ\b", # "—á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ"
    r"\b–∫–æ–≥–¥–∞\s+–±—É–¥–µ—Ç\s+–≥–æ—Ç–æ–≤–æ\b",            # "–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ"
    r"\b–∫–æ–≥–¥–∞\s+–±—É–¥–µ—Ç\s+–≥–æ—Ç–æ–≤–∞\b",            # "–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞"
    r"\b–∫–æ–≥–¥–∞\s+–±—É–¥–µ—Ç\s+–≥–æ—Ç–æ–≤\b",              # "–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤"
]

ETA_REGEX = re.compile("|".join(ETA_PATTERNS_RO + ETA_PATTERNS_RU), re.IGNORECASE)

# === Anti-spam ETA: rƒÉspunde o singurƒÉ datƒÉ per conversa»õie (per user) ===
ETA_REPLIED: Dict[str, bool] = {} 

# === LIVRARE: text + trigger intent (RO+RU) ===
DELIVERY_TEXT = (
    "LivrƒÉm √Æn toatƒÉ Moldova üì¶\n\n"
    "‚úÖ √én Chi»ôinƒÉu »ôi BƒÉl»õi: prin curier personal, timp de o zi lucrƒÉtoare, din moment ce este gata comanda, direct la adresƒÉ. Cost livrare: 65 lei.\n\n"
    "‚úÖ √én alte localitƒÉ»õi:\n"
    "‚Ä¢ Prin po»ôtƒÉ ‚Äî ajunge √Æn 3 zile lucrƒÉtoare, plata la primire (cash), 65 lei livrarea.\n"
    "‚Ä¢ Prin curier ‚Äî 1/2 zile lucrƒÉtoare din momentul expedierii, plata pentru comandƒÉ se face √Æn prealabil pe card, 68 lei livrarea.\n\n"
    "Cum a»õi prefera sƒÉ facem livrarea?"
)

DELIVERY_TEXT_RU = (
    "–î–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–π –ú–æ–ª–¥–æ–≤–µ üì¶\n\n"
    "‚úÖ –í –ö–∏—à–∏–Ω—ë–≤–µ –∏ –ë–µ–ª—å—Ü–∞—Ö: –∫—É—Ä—å–µ—Ä–æ–º –ª–∏—á–Ω–æ, –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞, –ø—Ä—è–º–æ –ø–æ –∞–¥—Ä–µ—Å—É. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: 65 –ª–µ–π.\n\n"
    "‚úÖ –í –¥—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:\n"
    "‚Ä¢ –ü–æ—á—Ç–æ–π ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–Ω–∞–ª–∏—á–Ω—ã–º–∏), 65 –ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞.\n"
    "‚Ä¢ –ö—É—Ä—å–µ—Ä–æ–º ‚Äî 1/2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É, –¥–æ—Å—Ç–∞–≤–∫–∞ 68 –ª–µ–π.\n\n"
    "–ö–∞–∫ –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?"
)

# Cuvinte-cheie/√ÆntrebƒÉri pentru livrare (inten»õie explicitƒÉ), fƒÉrƒÉ a include executarea/ETA
DELIVERY_PATTERNS_RO = [
    r"\bcum\s+se\s+face\s+livrarea\b",
    r"\bcum\s+livra[»õt]i\b",                        # cum livra»õi/livrati
    r"\bmetod[ƒÉa]?\s+de\s+livrare\b",
    r"\bmodalit[ƒÉa][»õt]i\s+de\s+livrare\b",
    r"\bexpediere\b", r"\btrimite[»õt]i\b",          # ‚Äûtrimite»õi √Æn...?‚Äù, ‚Äûtrimite»õi prin...?‚Äù
    r"\blivrarea\b", r"\blivrare\b",
    r"\bcurier\b", r"\bpo[»ôs]t[ƒÉa]\b",
    r"\bcost(ul)?\s+livr[ƒÉa]rii?\b", r"\btaxa\s+de\s+livrare\b",
    r"\blivra[»õt]i\s+√Æn\b",                         # ‚Äûlivra»õi √Æn Orhei?‚Äù
    r"\bse\s+livreaz[ƒÉa]\b",
    r"\bcum\s+ajunge\b",                            # ‚Äûcum ajunge coletul?‚Äù
]
DELIVERY_PATTERNS_RU = [
    r"\b–∫–∞–∫\s+–¥–æ—Å—Ç–∞–≤–∫–∞\b", r"\b–∫–∞–∫\s+–≤—ã\s+–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ\b",
    r"\b—Å–ø–æ—Å–æ–±(—ã)?\s+–¥–æ—Å—Ç–∞–≤–∫–∏\b",
    r"\b–æ—Ç–ø—Ä–∞–≤–∫[–∞–∏]\b", r"\b–ø–µ—Ä–µ—Å—ã–ª–∫[–∞–∏]\b",
    r"\b–¥–æ—Å—Ç–∞–≤–∫[–∞–∏]\b", r"\b–∫—É—Ä—å–µ—Ä\b", r"\b–ø–æ—á—Ç[–∞—ã]\b",
    r"\b—Å—Ç–æ–∏–º–æ—Å—Ç[—å–∏]\s+–¥–æ—Å—Ç–∞–≤–∫–∏\b", r"\b—Å–∫–æ–ª—å–∫–æ\s+—Å—Ç–æ–∏—Ç\s+–¥–æ—Å—Ç–∞–≤–∫[–∞–∏]\b",
    r"\b–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ\s+–≤\b",                         # ‚Äû–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤ ...?‚Äù
    r"\b–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\b",
]

DELIVERY_REGEX = re.compile("|".join(DELIVERY_PATTERNS_RO + DELIVERY_PATTERNS_RU), re.IGNORECASE)

# Anti-spam livrare: rƒÉspunde o singurƒÉ datƒÉ per user/conversa»õie
DELIVERY_REPLIED: Dict[str, bool] = {}

# === LOCATION DETECTION ===
# Location-specific delivery messages
LOCATION_DELIVERY_CHISINAU = (
    "Putem livra prin curier\n\n"
    "LivreazƒÉ timp de o zi lucrƒÉtoare\n\n"
    "Direct la adresa comodƒÉ\n\n"
    "SunƒÉ »ôi se √Æn»õelege din timp\n\n"
    "Livrarea e 65 lei\n\n"
    "La fel din Chi»ôinƒÉu este posibilƒÉ preluarea comenzii din oficiu\n\n"
    "De luni p√¢nƒÉ vineri la adresa Feredeului 4/4\n\n"
    "√én intervalul orelor 9:00-16:00\n\n"
    "Cum vƒÉ este mai comod ?\n"
    "Cu livrare sau preluare din oficiu?"
)

LOCATION_DELIVERY_BALTI = (
    "Putem livra prin curier personal, timp de o zi lucrƒÉtoare, din moment ce este gata comanda, direct la adresƒÉ. Livrarea costƒÉ 65 lei."
)

LOCATION_DELIVERY_OTHER_MD = (
    "Se poate livra prin po»ôtƒÉ ‚Äî ajunge √Æn 3 zile lucrƒÉtoare, plata la primire (cash), 65 lei livrarea.\n\n"
    "Prin curier ‚Äî 1/2 zile lucrƒÉtoare din momentul expedierii, plata pentru comandƒÉ se face √Æn prealabil pe card, 68 lei livrarea.\n\n"
    "Cum a»õi prefera sƒÉ facem livrarea?"
)

# Location detection patterns
CHISINAU_PATTERNS = [
    r"\bchisinau\b", r"\bchi»ôinƒÉu\b", r"\bchisinƒÉu\b", r"\bchi»ôinau\b",
    r"\bmun\.?\s*chisinau\b", r"\bmun\.?\s*chi»ôinƒÉu\b", r"\bmun\.?\s*chisinƒÉu\b", r"\bmun\.?\s*chi»ôinau\b",
    r"\bor\.?\s*chisinau\b", r"\bor\.?\s*chi»ôinƒÉu\b", r"\bor\.?\s*chisinƒÉu\b", r"\bor\.?\s*chi»ôinau\b",
    r"\b–∫–∏—à–∏–Ω–µ–≤\b", r"\b–∫–∏—à–∏–Ω—ë–≤\b", r"\b–∫–∏—à–∏–Ω—ë–≤\b", r"\b–∫–∏—à–∏–Ω–µ–≤\b"
]

BALTI_PATTERNS = [
    r"\bbalti\b", r"\bbƒÉl»õi\b", r"\bbalti\b", r"\bbƒÉl»õi\b",
    r"\b–±–µ–ª—å—Ü—ã\b"
]

# Other Moldova localities patterns - comprehensive list of all raions and cities
OTHER_MD_PATTERNS = [
    # Major cities and towns
    r"\banenii\s+noi\b", r"\bbriceni\b", r"\bcahul\b", r"\bcantemir\b", r"\bc[ƒÉa]l[ƒÉa]ra[»ôs]i\b",
    r"\bc[ƒÉa]u[»ôs]eni\b", r"\bcimi[»ôs]lia\b", r"\bcriuleni\b", r"\bdonduseni\b", r"\bdondu[»ôs]eni\b", r"\bdrochia\b",
    r"\bedine[»õt]\b", r"\bf[ƒÉa]le[»ôs]ti\b", r"\bflore[»ôs]ti\b", r"\bglodeni\b", r"\bh[√¢a]nce[»ôs]ti\b",
    r"\bialoveni\b", r"\bleova\b", r"\bnisporeni\b", r"\bocni[»õt]a\b", r"\borhei\b", r"\brezina\b",
    r"\br[√Æi][»ôs]cani\b", r"\bs[√Æi]ngerei\b", r"\b[»ôs]old[ƒÉa]ne[»ôs]ti\b", r"\b[»ôs]tefan\s+vod[ƒÉa]\b",
    r"\bstr[ƒÉa][»ôs]eni\b", r"\btaraclia\b", r"\btelene[»ôs]ti\b", r"\bungheni\b",
    
    # Raion names (with diacritics variations)
    r"\braionul\s+anenii\s+noi\b", r"\braionul\s+briceni\b", r"\braionul\s+cahul\b",
    r"\braionul\s+cantemir\b", r"\braionul\s+c[ƒÉa]l[ƒÉa]ra[»ôs]i\b", r"\braionul\s+c[ƒÉa]u[»ôs]eni\b",
    r"\braionul\s+cimi[»ôs]lia\b", r"\braionul\s+criuleni\b", r"\braionul\s+donduseni\b", r"\braionul\s+dondu[»ôs]eni\b",
    r"\braionul\s+drochia\b", r"\braionul\s+edine[»õt]\b", r"\braionul\s+f[ƒÉa]le[»ôs]ti\b",
    r"\braionul\s+flore[»ôs]ti\b", r"\braionul\s+glodeni\b", r"\braionul\s+h[√¢a]nce[»ôs]ti\b",
    r"\braionul\s+ialoveni\b", r"\braionul\s+leova\b", r"\braionul\s+nisporeni\b",
    r"\braionul\s+ocni[»õt]a\b", r"\braionul\s+orhei\b", r"\braionul\s+rezina\b",
    r"\braionul\s+r[√Æi][»ôs]cani\b", r"\braionul\s+s[√Æi]ngerei\b", r"\braionul\s+[»ôs]old[ƒÉa]ne[»ôs]ti\b",
    r"\braionul\s+[»ôs]tefan\s+vod[ƒÉa]\b", r"\braionul\s+str[ƒÉa][»ôs]eni\b", r"\braionul\s+taraclia\b",
    r"\braionul\s+telene[»ôs]ti\b", r"\braionul\s+ungheni\b",
    
    # Abbreviated forms
    r"\br\.\s+anenii\s+noi\b", r"\br\.\s+briceni\b", r"\br\.\s+cahul\b", r"\br\.\s+cantemir\b",
    r"\br\.\s+c[ƒÉa]l[ƒÉa]ra[»ôs]i\b", r"\br\.\s+c[ƒÉa]u[»ôs]eni\b", r"\br\.\s+cimi[»ôs]lia\b",
    r"\br\.\s+criuleni\b", r"\br\.\s+donduseni\b", r"\br\.\s+dondu[»ôs]eni\b", r"\br\.\s+drochia\b", r"\br\.\s+edine[»õt]\b",
    r"\br\.\s+f[ƒÉa]le[»ôs]ti\b", r"\br\.\s+flore[»ôs]ti\b", r"\br\.\s+glodeni\b",
    r"\br\.\s+h[√¢a]nce[»ôs]ti\b", r"\br\.\s+ialoveni\b", r"\br\.\s+leova\b", r"\br\.\s+nisporeni\b",
    r"\br\.\s+ocni[»õt]a\b", r"\br\.\s+orhei\b", r"\br\.\s+rezina\b", r"\br\.\s+r[√Æi][»ôs]cani\b",
    r"\br\.\s+s[√Æi]ngerei\b", r"\br\.\s+[»ôs]old[ƒÉa]ne[»ôs]ti\b", r"\br\.\s+[»ôs]tefan\s+vod[ƒÉa]\b",
    r"\br\.\s+str[ƒÉa][»ôs]eni\b", r"\br\.\s+taraclia\b", r"\br\.\s+telene[»ôs]ti\b", r"\br\.\s+ungheni\b",
    
    # Village patterns (sate) - more comprehensive
    r"\bsatul\s+\w+\b", r"\bcomuna\s+\w+\b", r"\bsat\s+\w+\b", r"\bora[»ôs]ul\s+\w+\b", r"\bora[»ôs]\s+\w+\b",
    r"\b√Æn\s+satul\s+\w+\b", r"\b√Æn\s+comuna\s+\w+\b", r"\b√Æn\s+ora[»ôs]ul\s+\w+\b", r"\b√Æn\s+ora[»ôs]\s+\w+\b",
    r"\blimbenii\s+vechi\b", r"\blimbenii\s+noi\b", r"\bvechi\b", r"\bnoi\b",  # Common village suffixes
    
    # Generic administrative patterns
    r"\braionul\s+\w+\b", r"\br\.\s+\w+\b", r"\bor\.\s+\w+\b", r"\bmun\.\s+\w+\b"
]

# Compiled regex patterns
CHISINAU_REGEX = re.compile("|".join(CHISINAU_PATTERNS), re.IGNORECASE)
BALTI_REGEX = re.compile("|".join(BALTI_PATTERNS), re.IGNORECASE)
OTHER_MD_REGEX = re.compile("|".join(OTHER_MD_PATTERNS), re.IGNORECASE)

# Anti-spam for location-specific delivery messages
LOCATION_DELIVERY_REPLIED: Dict[str, str] = {}  # sender_id -> location_category

# Anti-spam thank you: rƒÉspunde o singurƒÉ datƒÉ per conversa»õie
THANK_YOU_REPLIED: Dict[str, bool] = {}

# Anti-spam goodbye: rƒÉspunde o singurƒÉ datƒÉ per conversa»õie
GOODBYE_REPLIED: Dict[str, bool] = {}

# === Galeria de imagini - o singurƒÉ datƒÉ per conversa»õie ===
GALLERY_SENT: Dict[str, bool] = {}

# === OfertƒÉ text - o singurƒÉ datƒÉ per conversa»õie ===
OFFER_SENT: Dict[str, bool] = {}

# === Greeting logic - o singurƒÉ datƒÉ per conversa»õie ===
GREETING_SENT: Dict[str, bool] = {}

# === Manual greeting detection patterns ===
MANUAL_GREETING_PATTERNS_RO = [
    r"\bbun[ƒÉa]\s+ziua\b",                    # bunƒÉ ziua
    r"\bbun[ƒÉa]\s+seara\b",                   # bunƒÉ seara
    r"\bbun[ƒÉa]\s+diminea[»õt]a\b",            # bunƒÉ diminea»õa
    r"\bsalut\b",                             # salut
    r"\bsalutare\b",                          # salutare
    r"\bbun[ƒÉa]\b",                           # bunƒÉ
    r"\bhello\b",                             # hello
    r"\bhi\b",                                # hi
    r"\bhey\b",                               # hey
    r"\bciao\b",                              # ciao
]

MANUAL_GREETING_PATTERNS_RU = [
    r"\b–¥–æ–±—Ä–æ–µ\s+—É—Ç—Ä–æ\b",                     # –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ
    r"\b–¥–æ–±—Ä—ã–π\s+–¥–µ–Ω—å\b",                     # –¥–æ–±—Ä—ã–π –¥–µ–Ω—å
    r"\b–¥–æ–±—Ä—ã–π\s+–≤–µ—á–µ—Ä\b",                    # –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä
    r"\b–ø—Ä–∏–≤–µ—Ç\b",                            # –ø—Ä–∏–≤–µ—Ç
    r"\b–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\b",                      # –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ
    r"\b–¥–æ–±—Ä–æ\s+–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\b",                # –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
    r"\bhello\b",                             # hello
    r"\bhi\b",                                # hi
    r"\bhey\b",                               # hey
]

MANUAL_GREETING_REGEX = re.compile("|".join(MANUAL_GREETING_PATTERNS_RO + MANUAL_GREETING_PATTERNS_RU), re.IGNORECASE)

# === Greeting messages ===
GREETING_TEXT_RO = "Salutare üëã"
GREETING_TEXT_RU = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã"

# === Configurare imagini ofertƒÉ ===
OFFER_MEDIA_RO = [
    f"{PUBLIC_BASE_URL}/static/offer/ro_01.jpg",
    f"{PUBLIC_BASE_URL}/static/offer/ro_02.jpg", 
    f"{PUBLIC_BASE_URL}/static/offer/ro_03.jpg",
    f"{PUBLIC_BASE_URL}/static/offer/ro_04.jpg",
    f"{PUBLIC_BASE_URL}/static/offer/ro_05.jpg"
] if PUBLIC_BASE_URL else []

OFFER_MEDIA_RU = [
    f"{PUBLIC_BASE_URL}/static/offer/ru_01.jpg",
    f"{PUBLIC_BASE_URL}/static/offer/ru_02.jpg",
    f"{PUBLIC_BASE_URL}/static/offer/ru_03.jpg", 
    f"{PUBLIC_BASE_URL}/static/offer/ru_04.jpg",
    f"{PUBLIC_BASE_URL}/static/offer/ru_05.jpg"
] if PUBLIC_BASE_URL else []

# === Trigger ‚ÄûmƒÉ g√¢ndesc / revin‚Äù ===
FOLLOWUP_PATTERNS_RO = [
    # Existing patterns - preserved
    r"\bm[ƒÉa]\s+voi\s+g[√¢a]ndi\b",
    r"\bm[ƒÉa]\s+g[√¢a]ndesc\b",
    r"\bm[ƒÉa]\s+mai\s+g[√¢a]ndesc\b",                     # mƒÉ mai g√¢ndesc
    r"\bmai\s+g[√¢a]ndesc\b",                             # mai g√¢ndesc
    r"\bo\s+s[ƒÉa]\s+m[ƒÉa]\s+g[√¢a]ndesc\b",
    r"\bm[ƒÉa]\s+determin\b",
    r"\b(revin|revin\s+mai\s+t[√¢a]rziu)\b",
    r"\b(revenim|revenim\s+cu\s+un?\s+rƒÉspuns)\b",       # "revenim cu un rƒÉspuns"
    r"\b(revenim|revenim\s+mai\s+t[√¢a]rziu)\b",          # "revenim mai t√¢rziu"
    r"\bv[ƒÉa]\s+anun[»õt]\b",
    r"\bdac[ƒÉa]\s+ceva\s+v[ƒÉa]\s+anun[»õt]\b",
    r"\bpoate\s+revin\b",
    r"\bpoate\s+revenim\b",                              # "poate revenim"
    r"\bdecid\s+dup[ƒÉa]\b",
    r"\bmai\s+t[√¢a]rziu\s+revin\b",
    r"\bmai\s+t[√¢a]rziu\s+revenim\b",                   # "mai t√¢rziu revenim"
    
    # Additional Romanian variations for "I'll think about it"
    r"\bm[ƒÉa]\s+voi\s+reflecta\b",                    # mƒÉ voi reflecta
    r"\bm[ƒÉa]\s+voi\s+considera\b",                   # mƒÉ voi considera
    r"\bm[ƒÉa]\s+voi\s+medita\b",                      # mƒÉ voi medita
    r"\bvoi\s+g[√¢a]ndi\b",                           # voi g√¢ndi
    r"\bvoi\s+reflecta\b",                           # voi reflecta
    r"\bvoi\s+considera\b",                          # voi considera
    r"\bvoi\s+medita\b",                             # voi medita
    r"\bm[ƒÉa]\s+g[√¢a]ndesc\s+la\s+asta\b",           # mƒÉ g√¢ndesc la asta
    r"\bm[ƒÉa]\s+g[√¢a]ndesc\s+la\s+ce\s+mi\s+ai\s+spus\b", # mƒÉ g√¢ndesc la ce mi-ai spus
    r"\bhai\s+s[ƒÉa]\s+m[ƒÉa]\s+g[√¢a]ndesc\b",         # hai sƒÉ mƒÉ g√¢ndesc
    r"\blas[ƒÉa]\-m[ƒÉa]\s+s[ƒÉa]\s+m[ƒÉa]\s+g[√¢a]ndesc\b", # lasƒÉ-mƒÉ sƒÉ mƒÉ g√¢ndesc
    r"\btrebuie\s+s[ƒÉa]\s+m[ƒÉa]\s+g[√¢a]ndesc\b",     # trebuie sƒÉ mƒÉ g√¢ndesc
    r"\bvreau\s+s[ƒÉa]\s+m[ƒÉa]\s+g[√¢a]ndesc\b",       # vreau sƒÉ mƒÉ g√¢ndesc
    r"\bvreau\s+s[ƒÉa]\s+g[√¢a]ndesc\b",               # vreau sƒÉ g√¢ndesc
    r"\bam\s+nevoie\s+s[ƒÉa]\s+m[ƒÉa]\s+g[√¢a]ndesc\b", # am nevoie sƒÉ mƒÉ g√¢ndesc
    r"\bam\s+nevoie\s+s[ƒÉa]\s+g[√¢a]ndesc\b",         # am nevoie sƒÉ g√¢ndesc
    
    # Additional Romanian variations for "I'll get back to you"
    r"\bmai\s+t[√¢a]rziu\s+v[ƒÉa]\s+contactez\b",      # mai t√¢rziu vƒÉ contactez
    r"\bmai\s+t[√¢a]rziu\s+v[ƒÉa]\s+scriu\b",          # mai t√¢rziu vƒÉ scriu
    r"\bmai\s+t[√¢a]rziu\s+v[ƒÉa]\s+anun[»õt]\b",       # mai t√¢rziu vƒÉ anun»õ
    r"\bmai\s+t[√¢a]rziu\s+v[ƒÉa]\s+spun\b",           # mai t√¢rziu vƒÉ spun
    r"\bmai\s+t[√¢a]rziu\s+te\s+contactez\b",         # mai t√¢rziu te contactez
    r"\bmai\s+t[√¢a]rziu\s+te\s+scriu\b",             # mai t√¢rziu te scriu
    r"\bmai\s+t[√¢a]rziu\s+te\s+anun[»õt]\b",          # mai t√¢rziu te anun»õ
    r"\bmai\s+t[√¢a]rziu\s+te\s+spun\b",              # mai t√¢rziu te spun
    r"\bv[ƒÉa]\s+contactez\s+mai\s+t[√¢a]rziu\b",      # vƒÉ contactez mai t√¢rziu
    r"\bv[ƒÉa]\s+scriu\s+mai\s+t[√¢a]rziu\b",          # vƒÉ scriu mai t√¢rziu
    r"\bv[ƒÉa]\s+anun[»õt]\s+mai\s+t[√¢a]rziu\b",       # vƒÉ anun»õ mai t√¢rziu
    r"\bv[ƒÉa]\s+spun\s+mai\s+t[√¢a]rziu\b",           # vƒÉ spun mai t√¢rziu
    r"\bte\s+contactez\s+mai\s+t[√¢a]rziu\b",         # te contactez mai t√¢rziu
    r"\bte\s+scriu\s+mai\s+t[√¢a]rziu\b",             # te scriu mai t√¢rziu
    r"\bte\s+anun[»õt]\s+mai\s+t[√¢a]rziu\b",          # te anun»õ mai t√¢rziu
    r"\bte\s+spun\s+mai\s+t[√¢a]rziu\b",              # te spun mai t√¢rziu
    
    # Romanian variations for "I'll decide later"
    r"\bvoi\s+decide\s+mai\s+t[√¢a]rziu\b",          # voi decide mai t√¢rziu
    r"\bvoi\s+decide\s+dup[ƒÉa]\b",                  # voi decide dupƒÉ
    r"\bvoi\s+decide\s+dup[ƒÉa]\s+ce\s+m[ƒÉa]\s+g[√¢a]ndesc\b", # voi decide dupƒÉ ce mƒÉ g√¢ndesc
    r"\bm[ƒÉa]\s+voi\s+hot[ƒÉa]r[√¢a]i\b",             # mƒÉ voi hotƒÉr√¢i
    r"\bvoi\s+hot[ƒÉa]r[√¢a]i\b",                     # voi hotƒÉr√¢i
    r"\bhot[ƒÉa]r[√¢a]esc\s+mai\s+t[√¢a]rziu\b",       # hotƒÉr√¢esc mai t√¢rziu
    r"\bhot[ƒÉa]r[√¢a]esc\s+dup[ƒÉa]\b",               # hotƒÉr√¢esc dupƒÉ
    r"\bm[ƒÉa]\s+voi\s+decide\b",                    # mƒÉ voi decide
    r"\bdecid\s+mai\s+t[√¢a]rziu\b",                 # decid mai t√¢rziu
    r"\bdecid\s+dup[ƒÉa]\s+ce\s+m[ƒÉa]\s+g[√¢a]ndesc\b", # decid dupƒÉ ce mƒÉ g√¢ndesc
    
    # Romanian variations for "I'll let you know"
    r"\bv[ƒÉa]\s+anun[»õt]\s+c[√¢a]nd\s+decid\b",      # vƒÉ anun»õ c√¢nd decid
    r"\bv[ƒÉa]\s+anun[»õt]\s+c[√¢a]nd\s+hot[ƒÉa]r[√¢a]esc\b", # vƒÉ anun»õ c√¢nd hotƒÉr√¢esc
    r"\bv[ƒÉa]\s+anun[»õt]\s+c[√¢a]nd\s+ma\s+g[√¢a]ndesc\b", # vƒÉ anun»õ c√¢nd ma g√¢ndesc
    r"\bte\s+anun[»õt]\s+c[√¢a]nd\s+decid\b",         # te anun»õ c√¢nd decid
    r"\bte\s+anun[»õt]\s+c[√¢a]nd\s+hot[ƒÉa]r[√¢a]esc\b", # te anun»õ c√¢nd hotƒÉr√¢esc
    r"\bte\s+anun[»õt]\s+c[√¢a]nd\s+ma\s+g[√¢a]ndesc\b", # te anun»õ c√¢nd ma g√¢ndesc
    r"\bv[ƒÉa]\s+spun\s+c[√¢a]nd\s+decid\b",          # vƒÉ spun c√¢nd decid
    r"\bv[ƒÉa]\s+spun\s+c[√¢a]nd\s+hot[ƒÉa]r[√¢a]esc\b", # vƒÉ spun c√¢nd hotƒÉr√¢esc
    r"\bte\s+spun\s+c[√¢a]nd\s+decid\b",             # te spun c√¢nd decid
    r"\bte\s+spun\s+c[√¢a]nd\s+hot[ƒÉa]r[√¢a]esc\b",   # te spun c√¢nd hotƒÉr√¢esc
    
    # Romanian variations for "maybe I'll come back"
    r"\bpoate\s+v[ƒÉa]\s+contactez\b",               # poate vƒÉ contactez
    r"\bpoate\s+te\s+contactez\b",                  # poate te contactez
    r"\bpoate\s+v[ƒÉa]\s+scriu\b",                   # poate vƒÉ scriu
    r"\bpoate\s+te\s+scriu\b",                      # poate te scriu
    r"\bpoate\s+v[ƒÉa]\s+anun[»õt]\b",                # poate vƒÉ anun»õ
    r"\bpoate\s+te\s+anun[»õt]\b",                   # poate te anun»õ
    r"\bpoate\s+v[ƒÉa]\s+spun\b",                    # poate vƒÉ spun
    r"\bpoate\s+te\s+spun\b",                       # poate te spun
    
    # New patterns from analysis
    r"\bvoi\s+revin\b",                             # voi reveni
    r"\bvoi\s+revin\s+cu\s+un\s+raspuns\b",         # voi reveni cu un raspuns
    r"\bvoi\s+revin\s+cu\s+un\s+rƒÉspuns\b",         # voi reveni cu un rƒÉspuns
    r"\bvin\s+cu\s+un\s+raspuns\b",                 # vin cu un raspuns
    r"\bvin\s+cu\s+un\s+rƒÉspuns\b",                 # vin cu un rƒÉspuns
    r"\bvin\s+cu\s+un\s+raspuns\s+ulterior\b",     # vin cu un raspuns ulterior
    r"\bvin\s+cu\s+un\s+rƒÉspuns\s+ulterior\b",     # vin cu un rƒÉspuns ulterior
    r"\bhotaram\s+cu\s+colegi\b",                    # hotaram cu colegi
    r"\bhotaram\s+cu\s+colegi\s+si\s+vin\b",        # hotaram cu colegi si vin
    r"\bhotaram\s+cu\s+colegi\s+»ôi\s+vin\b",        # hotaram cu colegi »ôi vin
    r"\bmai\s+tarziu\s+va\s+scriu\b",                # mai tarziu va scriu
    r"\bmai\s+t[√¢a]rziu\s+va\s+scriu\b",            # mai t√¢rziu va scriu
    r"\bva\s+scriu\s+mai\s+tarziu\b",                # va scriu mai tarziu
    r"\bva\s+scriu\s+mai\s+t[√¢a]rziu\b",            # va scriu mai t√¢rziu
    # Additional patterns for common variations without diacritics
    r"\bvoi\s+revin\b",                             # voi reveni (without diacritics)
    r"\bvoi\s+revin\s+cu\s+un\s+raspuns\b",         # voi reveni cu un raspuns (without diacritics)
    r"\bvoi\s+revin\s+cu\s+un\s+rƒÉspuns\b",         # voi reveni cu un rƒÉspuns (without diacritics)
    r"\bvin\s+cu\s+un\s+raspuns\b",                 # vin cu un raspuns (without diacritics)
    r"\bvin\s+cu\s+un\s+rƒÉspuns\b",                 # vin cu un rƒÉspuns (without diacritics)
    r"\bvin\s+cu\s+un\s+raspuns\s+ulterior\b",     # vin cu un raspuns ulterior (without diacritics)
    r"\bvin\s+cu\s+un\s+rƒÉspuns\s+ulterior\b",     # vin cu un rƒÉspuns ulterior (without diacritics)
    r"\bhotaram\s+cu\s+colegi\b",                    # hotaram cu colegi (without diacritics)
    r"\bhotaram\s+cu\s+colegi\s+si\s+vin\b",        # hotaram cu colegi si vin (without diacritics)
    r"\bhotaram\s+cu\s+colegi\s+»ôi\s+vin\b",        # hotaram cu colegi »ôi vin (without diacritics)
    r"\bmai\s+tarziu\s+va\s+scriu\b",                # mai tarziu va scriu (without diacritics)
    r"\bmai\s+t[√¢a]rziu\s+va\s+scriu\b",            # mai t√¢rziu va scriu (without diacritics)
    r"\bva\s+scriu\s+mai\s+tarziu\b",                # va scriu mai tarziu (without diacritics)
    r"\bva\s+scriu\s+mai\s+t[√¢a]rziu\b",            # va scriu mai t√¢rziu (without diacritics)
]

FOLLOWUP_PATTERNS_RU = [
    # Existing patterns - preserved
    r"\b—è\s+–ø–æ–¥—É–º–∞—é\b",
    r"\b–ø–æ–¥—É–º[–∞—é–µ]\b",
    r"\b–µ—Å–ª–∏\s+—á—Ç–æ\s+—Å–æ–æ–±—â[—É–∏–º]\b",
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\b",
    r"\b–ø–æ–∑–∂–µ\s+–Ω–∞–ø–∏—à[—É—é]\b",
    r"\b—Ä–µ—à[—É–∏–º]\s+–∏\s+–≤–µ—Ä–Ω—É—Å—å\b",
    r"\b–≤–µ—Ä–Ω—É—Å—å\s+–ø–æ–∑–∂–µ\b",
    r"\b–Ω–∞–ø–∏—à—É\s+–ø–æ–∑–∂–µ\b",
    r"\b–∫–∞–∫\s+—Ä–µ—à—É\s+‚Äî?\s*–Ω–∞–ø–∏—à—É\b",
    
    # Additional Russian variations for "I'll think about it"
    r"\b—è\s+–æ–±–¥—É–º–∞—é\b",                               # —è –æ–±–¥—É–º–∞—é
    r"\b—è\s+—Ä–∞—Å—Å–º–æ—Ç—Ä—é\b",                             # —è —Ä–∞—Å—Å–º–æ—Ç—Ä—é
    r"\b—è\s+–≤–∑–≤–µ—à—É\b",                                # —è –≤–∑–≤–µ—à—É
    r"\b—è\s+–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é\b",                         # —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é
    r"\b–æ–±–¥—É–º–∞—é\b",                                   # –æ–±–¥—É–º–∞—é
    r"\b—Ä–∞—Å—Å–º–æ—Ç—Ä—é\b",                                 # —Ä–∞—Å—Å–º–æ—Ç—Ä—é
    r"\b–≤–∑–≤–µ—à—É\b",                                    # –≤–∑–≤–µ—à—É
    r"\b–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é\b",                             # –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é
    r"\b–º–Ω–µ\s+–Ω—É–∂–Ω–æ\s+–ø–æ–¥—É–º–∞—Ç—å\b",                    # –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å
    r"\b–º–Ω–µ\s+–Ω—É–∂–Ω–æ\s+–æ–±–¥—É–º–∞—Ç—å\b",                    # –º–Ω–µ –Ω—É–∂–Ω–æ –æ–±–¥—É–º–∞—Ç—å
    r"\b–º–Ω–µ\s+–Ω—É–∂–Ω–æ\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å\b",                 # –º–Ω–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
    r"\b–º–Ω–µ\s+–Ω—É–∂–Ω–æ\s+–≤–∑–≤–µ—Å–∏—Ç—å\b",                    # –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∑–≤–µ—Å–∏—Ç—å
    r"\b—Ö–æ—á—É\s+–ø–æ–¥—É–º–∞—Ç—å\b",                           # —Ö–æ—á—É –ø–æ–¥—É–º–∞—Ç—å
    r"\b—Ö–æ—á—É\s+–æ–±–¥—É–º–∞—Ç—å\b",                           # —Ö–æ—á—É –æ–±–¥—É–º–∞—Ç—å
    r"\b—Ö–æ—á—É\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å\b",                        # —Ö–æ—á—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
    r"\b—Ö–æ—á—É\s+–≤–∑–≤–µ—Å–∏—Ç—å\b",                           # —Ö–æ—á—É –≤–∑–≤–µ—Å–∏—Ç—å
    r"\b–¥–∞–π\s+–ø–æ–¥—É–º–∞—Ç—å\b",                            # –¥–∞–π –ø–æ–¥—É–º–∞—Ç—å
    r"\b–¥–∞–π\s+–æ–±–¥—É–º–∞—Ç—å\b",                            # –¥–∞–π –æ–±–¥—É–º–∞—Ç—å
    r"\b–¥–∞–π\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å\b",                         # –¥–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
    r"\b–¥–∞–π\s+–≤–∑–≤–µ—Å–∏—Ç—å\b",                            # –¥–∞–π –≤–∑–≤–µ—Å–∏—Ç—å
    r"\b–¥–∞–π—Ç–µ\s+–ø–æ–¥—É–º–∞—Ç—å\b",                          # –¥–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å
    r"\b–¥–∞–π—Ç–µ\s+–æ–±–¥—É–º–∞—Ç—å\b",                          # –¥–∞–π—Ç–µ –æ–±–¥—É–º–∞—Ç—å
    r"\b–¥–∞–π—Ç–µ\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å\b",                       # –¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
    r"\b–¥–∞–π—Ç–µ\s+–≤–∑–≤–µ—Å–∏—Ç—å\b",                          # –¥–∞–π—Ç–µ –≤–∑–≤–µ—Å–∏—Ç—å
    r"\b–Ω—É–∂–Ω–æ\s+–ø–æ–¥—É–º–∞—Ç—å\b",                          # –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å
    r"\b–Ω—É–∂–Ω–æ\s+–æ–±–¥—É–º–∞—Ç—å\b",                          # –Ω—É–∂–Ω–æ –æ–±–¥—É–º–∞—Ç—å
    r"\b–Ω—É–∂–Ω–æ\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å\b",                       # –Ω—É–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
    r"\b–Ω—É–∂–Ω–æ\s+–≤–∑–≤–µ—Å–∏—Ç—å\b",                          # –Ω—É–∂–Ω–æ –≤–∑–≤–µ—Å–∏—Ç—å
    r"\b–¥–æ–ª–∂–µ–Ω\s+–ø–æ–¥—É–º–∞—Ç—å\b",                         # –¥–æ–ª–∂–µ–Ω –ø–æ–¥—É–º–∞—Ç—å
    r"\b–¥–æ–ª–∂–µ–Ω\s+–æ–±–¥—É–º–∞—Ç—å\b",                         # –¥–æ–ª–∂–µ–Ω –æ–±–¥—É–º–∞—Ç—å
    r"\b–¥–æ–ª–∂–µ–Ω\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å\b",                      # –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
    r"\b–¥–æ–ª–∂–µ–Ω\s+–≤–∑–≤–µ—Å–∏—Ç—å\b",                         # –¥–æ–ª–∂–µ–Ω –≤–∑–≤–µ—Å–∏—Ç—å
    r"\b–¥–æ–ª–∂–Ω–∞\s+–ø–æ–¥—É–º–∞—Ç—å\b",                         # –¥–æ–ª–∂–Ω–∞ –ø–æ–¥—É–º–∞—Ç—å
    r"\b–¥–æ–ª–∂–Ω–∞\s+–æ–±–¥—É–º–∞—Ç—å\b",                         # –¥–æ–ª–∂–Ω–∞ –æ–±–¥—É–º–∞—Ç—å
    r"\b–¥–æ–ª–∂–Ω–∞\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å\b",                      # –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å
    r"\b–¥–æ–ª–∂–Ω–∞\s+–≤–∑–≤–µ—Å–∏—Ç—å\b",                         # –¥–æ–ª–∂–Ω–∞ –≤–∑–≤–µ—Å–∏—Ç—å
    
    # Additional Russian variations for "I'll get back to you"
    r"\b–ø–æ–∑–∂–µ\s+–Ω–∞–ø–∏—à[—É—é]\b",                         # –ø–æ–∑–∂–µ –Ω–∞–ø–∏—à—É
    r"\b–ø–æ–∑–∂–µ\s+—Å–≤—è–∂[—É–µ]—Å—å\b",                        # –ø–æ–∑–∂–µ —Å–≤—è–∂—É—Å—å
    r"\b–ø–æ–∑–∂–µ\s+–æ—Ç–≤–µ—á[—É–µ]\b",                         # –ø–æ–∑–∂–µ –æ—Ç–≤–µ—á—É
    r"\b–ø–æ–∑–∂–µ\s+–Ω–∞–ø–∏—à[—É–µ]–º\b",                        # –ø–æ–∑–∂–µ –Ω–∞–ø–∏—à–µ–º
    r"\b–ø–æ–∑–∂–µ\s+—Å–≤—è–∂–µ–º—Å—è\b",                          # –ø–æ–∑–∂–µ —Å–≤—è–∂–µ–º—Å—è
    r"\b–ø–æ–∑–∂–µ\s+–æ—Ç–≤–µ—á–∏–º\b",                           # –ø–æ–∑–∂–µ –æ—Ç–≤–µ—á–∏–º
    r"\b–Ω–∞–ø–∏—à[—É—é]\s+–ø–æ–∑–∂–µ\b",                         # –Ω–∞–ø–∏—à—É –ø–æ–∑–∂–µ
    r"\b—Å–≤—è–∂[—É–µ]—Å—å\s+–ø–æ–∑–∂–µ\b",                        # —Å–≤—è–∂—É—Å—å –ø–æ–∑–∂–µ
    r"\b–æ—Ç–≤–µ—á[—É–µ]\s+–ø–æ–∑–∂–µ\b",                         # –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ
    r"\b–Ω–∞–ø–∏—à[—É–µ]–º\s+–ø–æ–∑–∂–µ\b",                        # –Ω–∞–ø–∏—à–µ–º –ø–æ–∑–∂–µ
    r"\b—Å–≤—è–∂–µ–º—Å—è\s+–ø–æ–∑–∂–µ\b",                          # —Å–≤—è–∂–µ–º—Å—è –ø–æ–∑–∂–µ
    r"\b–æ—Ç–≤–µ—á–∏–º\s+–ø–æ–∑–∂–µ\b",                           # –æ—Ç–≤–µ—á–∏–º –ø–æ–∑–∂–µ
    r"\b–Ω–∞–ø–∏—à[—É—é]\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                  # –Ω–∞–ø–∏—à—É —á—É—Ç—å –ø–æ–∑–∂–µ
    r"\b—Å–≤—è–∂[—É–µ]—Å—å\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                 # —Å–≤—è–∂—É—Å—å —á—É—Ç—å –ø–æ–∑–∂–µ
    r"\b–æ—Ç–≤–µ—á[—É–µ]\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                  # –æ—Ç–≤–µ—á—É —á—É—Ç—å –ø–æ–∑–∂–µ
    r"\b–Ω–∞–ø–∏—à[—É–µ]–º\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                 # –Ω–∞–ø–∏—à–µ–º —á—É—Ç—å –ø–æ–∑–∂–µ
    r"\b—Å–≤—è–∂–µ–º—Å—è\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                   # —Å–≤—è–∂–µ–º—Å—è —á—É—Ç—å –ø–æ–∑–∂–µ
    r"\b–æ—Ç–≤–µ—á–∏–º\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                    # –æ—Ç–≤–µ—á–∏–º —á—É—Ç—å –ø–æ–∑–∂–µ
    
    # Russian variations for "I'll decide later"
    r"\b—Ä–µ—à[—É—é]\s+–ø–æ–∑–∂–µ\b",                           # —Ä–µ—à—É –ø–æ–∑–∂–µ
    r"\b—Ä–µ—à[—É—é]\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                    # —Ä–µ—à—É —á—É—Ç—å –ø–æ–∑–∂–µ
    r"\b—Ä–µ—à[—É—é]\s+–ø–æ—Ç–æ–º\b",                           # —Ä–µ—à—É –ø–æ—Ç–æ–º
    r"\b—Ä–µ—à[—É—é]\s+—á—É—Ç—å\s+–ø–æ—Ç–æ–º\b",                    # —Ä–µ—à—É —á—É—Ç—å –ø–æ—Ç–æ–º
    r"\b—Ä–µ—à[—É—é]\s+—á—É—Ç—å\s+–ø–æ–∑–¥–Ω–µ–µ\b",                  # —Ä–µ—à—É —á—É—Ç—å –ø–æ–∑–¥–Ω–µ–µ
    r"\b—Ä–µ—à[—É—é]\s+—á—É—Ç—å\s+–ø–æ–∑–¥–Ω–µ–µ\b",                  # —Ä–µ—à—É —á—É—Ç—å –ø–æ–∑–¥–Ω–µ–µ
    r"\b—Ä–µ—à[—É—é]\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+–ø–æ–¥—É–º–∞—é\b",    # —Ä–µ—à—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–¥—É–º–∞—é
    r"\b—Ä–µ—à[—É—é]\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+–æ–±–¥—É–º–∞—é\b",    # —Ä–µ—à—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–±–¥—É–º–∞—é
    r"\b—Ä–µ—à[—É—é]\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+—Ä–∞—Å—Å–º–æ—Ç—Ä—é\b",  # —Ä–µ—à—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä—é
    r"\b—Ä–µ—à[—É—é]\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+–≤–∑–≤–µ—à—É\b",     # —Ä–µ—à—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–∑–≤–µ—à—É
    r"\b—Ä–µ—à[—É–µ]–º\s+–ø–æ–∑–∂–µ\b",                          # —Ä–µ—à–∏–º –ø–æ–∑–∂–µ
    r"\b—Ä–µ—à[—É–µ]–º\s+—á—É—Ç—å\s+–ø–æ–∑–∂–µ\b",                   # —Ä–µ—à–∏–º —á—É—Ç—å –ø–æ–∑–∂–µ
    r"\b—Ä–µ—à[—É–µ]–º\s+–ø–æ—Ç–æ–º\b",                          # —Ä–µ—à–∏–º –ø–æ—Ç–æ–º
    r"\b—Ä–µ—à[—É–µ]–º\s+—á—É—Ç—å\s+–ø–æ—Ç–æ–º\b",                   # —Ä–µ—à–∏–º —á—É—Ç—å –ø–æ—Ç–æ–º
    r"\b—Ä–µ—à[—É–µ]–º\s+—á—É—Ç—å\s+–ø–æ–∑–¥–Ω–µ–µ\b",                 # —Ä–µ—à–∏–º —á—É—Ç—å –ø–æ–∑–¥–Ω–µ–µ
    r"\b—Ä–µ—à[—É–µ]–º\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+–ø–æ–¥—É–º–∞–µ–º\b",  # —Ä–µ—à–∏–º –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–¥—É–º–∞–µ–º
    r"\b—Ä–µ—à[—É–µ]–º\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+–æ–±–¥—É–º–∞–µ–º\b",  # —Ä–µ—à–∏–º –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–±–¥—É–º–∞–µ–º
    r"\b—Ä–µ—à[—É–µ]–º\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º\b", # —Ä–µ—à–∏–º –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º
    r"\b—Ä–µ—à[—É–µ]–º\s+–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫\s+–≤–∑–≤–µ—Å–∏–º\b",   # —Ä–µ—à–∏–º –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–∑–≤–µ—Å–∏–º
    
    # Russian variations for "I'll let you know"
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+—Ä–µ—à[—É—é]\b",             # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ —Ä–µ—à—É
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+—Ä–µ—à[—É–µ]–º\b",            # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ —Ä–µ—à–∏–º
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+–ø–æ–¥—É–º–∞—é\b",             # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –ø–æ–¥—É–º–∞—é
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+–ø–æ–¥—É–º–∞–µ–º\b",            # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –ø–æ–¥—É–º–∞–µ–º
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+–æ–±–¥—É–º–∞—é\b",             # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –æ–±–¥—É–º–∞—é
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+–æ–±–¥—É–º–∞–µ–º\b",            # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –æ–±–¥—É–º–∞–µ–º
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+—Ä–∞—Å—Å–º–æ—Ç—Ä—é\b",           # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä—é
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º\b",          # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+–≤–∑–≤–µ—à—É\b",              # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –≤–∑–≤–µ—à—É
    r"\b–¥–∞–º\s+–∑–Ω–∞—Ç—å\s+–∫–æ–≥–¥–∞\s+–≤–∑–≤–µ—Å–∏–º\b",             # –¥–∞–º –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –≤–∑–≤–µ—Å–∏–º
    r"\b—Å–æ–æ–±—â[—É—é]\s+–∫–æ–≥–¥–∞\s+—Ä–µ—à[—É—é]\b",               # —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ —Ä–µ—à—É
    r"\b—Å–æ–æ–±—â[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+—Ä–µ—à[—É–µ]–º\b",             # —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ —Ä–µ—à–∏–º
    r"\b—Å–æ–æ–±—â[—É—é]\s+–∫–æ–≥–¥–∞\s+–ø–æ–¥—É–º–∞—é\b",               # —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ –ø–æ–¥—É–º–∞—é
    r"\b—Å–æ–æ–±—â[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+–ø–æ–¥—É–º–∞–µ–º\b",             # —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –ø–æ–¥—É–º–∞–µ–º
    r"\b—Å–æ–æ–±—â[—É—é]\s+–∫–æ–≥–¥–∞\s+–æ–±–¥—É–º–∞—é\b",               # —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ –æ–±–¥—É–º–∞—é
    r"\b—Å–æ–æ–±—â[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+–æ–±–¥—É–º–∞–µ–º\b",             # —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –æ–±–¥—É–º–∞–µ–º
    r"\b—Å–æ–æ–±—â[—É—é]\s+–∫–æ–≥–¥–∞\s+—Ä–∞—Å—Å–º–æ—Ç—Ä—é\b",             # —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä—é
    r"\b—Å–æ–æ–±—â[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º\b",           # —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º
    r"\b—Å–æ–æ–±—â[—É—é]\s+–∫–æ–≥–¥–∞\s+–≤–∑–≤–µ—à—É\b",                # —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ –≤–∑–≤–µ—à—É
    r"\b—Å–æ–æ–±—â[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+–≤–∑–≤–µ—Å–∏–º\b",              # —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –≤–∑–≤–µ—Å–∏–º
    r"\b–Ω–∞–ø–∏—à[—É—é]\s+–∫–æ–≥–¥–∞\s+—Ä–µ—à[—É—é]\b",               # –Ω–∞–ø–∏—à—É –∫–æ–≥–¥–∞ —Ä–µ—à—É
    r"\b–Ω–∞–ø–∏—à[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+—Ä–µ—à[—É–µ]–º\b",             # –Ω–∞–ø–∏—à–µ–º –∫–æ–≥–¥–∞ —Ä–µ—à–∏–º
    r"\b–Ω–∞–ø–∏—à[—É—é]\s+–∫–æ–≥–¥–∞\s+–ø–æ–¥—É–º–∞—é\b",               # –Ω–∞–ø–∏—à—É –∫–æ–≥–¥–∞ –ø–æ–¥—É–º–∞—é
    r"\b–Ω–∞–ø–∏—à[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+–ø–æ–¥—É–º–∞–µ–º\b",             # –Ω–∞–ø–∏—à–µ–º –∫–æ–≥–¥–∞ –ø–æ–¥—É–º–∞–µ–º
    r"\b–Ω–∞–ø–∏—à[—É—é]\s+–∫–æ–≥–¥–∞\s+–æ–±–¥—É–º–∞—é\b",               # –Ω–∞–ø–∏—à—É –∫–æ–≥–¥–∞ –æ–±–¥—É–º–∞—é
    r"\b–Ω–∞–ø–∏—à[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+–æ–±–¥—É–º–∞–µ–º\b",             # –Ω–∞–ø–∏—à–µ–º –∫–æ–≥–¥–∞ –æ–±–¥—É–º–∞–µ–º
    r"\b–Ω–∞–ø–∏—à[—É—é]\s+–∫–æ–≥–¥–∞\s+—Ä–∞—Å—Å–º–æ—Ç—Ä—é\b",             # –Ω–∞–ø–∏—à—É –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä—é
    r"\b–Ω–∞–ø–∏—à[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º\b",           # –Ω–∞–ø–∏—à–µ–º –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º
    r"\b–Ω–∞–ø–∏—à[—É—é]\s+–∫–æ–≥–¥–∞\s+–≤–∑–≤–µ—à—É\b",                # –Ω–∞–ø–∏—à—É –∫–æ–≥–¥–∞ –≤–∑–≤–µ—à—É
    r"\b–Ω–∞–ø–∏—à[—É–µ]–º\s+–∫–æ–≥–¥–∞\s+–≤–∑–≤–µ—Å–∏–º\b",              # –Ω–∞–ø–∏—à–µ–º –∫–æ–≥–¥–∞ –≤–∑–≤–µ—Å–∏–º
    
    # Russian variations for "maybe I'll come back"
    r"\b–º–æ–∂–µ—Ç\s+–Ω–∞–ø–∏—à[—É—é]\b",                         # –º–æ–∂–µ—Ç –Ω–∞–ø–∏—à—É
    r"\b–º–æ–∂–µ—Ç\s+–Ω–∞–ø–∏—à[—É–µ]–º\b",                        # –º–æ–∂–µ—Ç –Ω–∞–ø–∏—à–µ–º
    r"\b–º–æ–∂–µ—Ç\s+—Å–≤—è–∂[—É–µ]—Å—å\b",                        # –º–æ–∂–µ—Ç —Å–≤—è–∂—É—Å—å
    r"\b–º–æ–∂–µ—Ç\s+—Å–≤—è–∂–µ–º—Å—è\b",                          # –º–æ–∂–µ—Ç —Å–≤—è–∂–µ–º—Å—è
    r"\b–º–æ–∂–µ—Ç\s+–æ—Ç–≤–µ—á[—É–µ]\b",                         # –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á—É
    r"\b–º–æ–∂–µ—Ç\s+–æ—Ç–≤–µ—á–∏–º\b",                           # –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∏–º
    r"\b–º–æ–∂–µ—Ç\s+—Å–æ–æ–±—â[—É—é]\b",                         # –º–æ–∂–µ—Ç —Å–æ–æ–±—â—É
    r"\b–º–æ–∂–µ—Ç\s+—Å–æ–æ–±—â[—É–µ]–º\b",                        # –º–æ–∂–µ—Ç —Å–æ–æ–±—â–∏–º
    r"\b–º–æ–∂–µ—Ç\s+–¥–∞–º\s+–∑–Ω–∞—Ç—å\b",                       # –º–æ–∂–µ—Ç –¥–∞–º –∑–Ω–∞—Ç—å
    r"\b–º–æ–∂–µ—Ç\s+–¥–∞–¥–∏–º\s+–∑–Ω–∞—Ç—å\b",                     # –º–æ–∂–µ—Ç –¥–∞–¥–∏–º –∑–Ω–∞—Ç—å
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+–Ω–∞–ø–∏—à[—É—é]\b",                      # –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–ø–∏—à—É
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+–Ω–∞–ø–∏—à[—É–µ]–º\b",                     # –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–ø–∏—à–µ–º
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+—Å–≤—è–∂[—É–µ]—Å—å\b",                     # –≤–æ–∑–º–æ–∂–Ω–æ —Å–≤—è–∂—É—Å—å
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+—Å–≤—è–∂–µ–º—Å—è\b",                       # –≤–æ–∑–º–æ–∂–Ω–æ —Å–≤—è–∂–µ–º—Å—è
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+–æ—Ç–≤–µ—á[—É–µ]\b",                      # –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—á—É
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+–æ—Ç–≤–µ—á–∏–º\b",                        # –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∏–º
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+—Å–æ–æ–±—â[—É—é]\b",                      # –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–æ–±—â—É
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+—Å–æ–æ–±—â[—É–µ]–º\b",                     # –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–æ–±—â–∏–º
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+–¥–∞–º\s+–∑–Ω–∞—Ç—å\b",                    # –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–º –∑–Ω–∞—Ç—å
    r"\b–≤–æ–∑–º–æ–∂–Ω–æ\s+–¥–∞–¥–∏–º\s+–∑–Ω–∞—Ç—å\b",                  # –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–¥–∏–º –∑–Ω–∞—Ç—å
    
    # New patterns from analysis
    r"\b–ø–æ–≥–æ–≤–æ—Ä—é\s+—Å\s+–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏\b",            # –ø–æ–≥–æ–≤–æ—Ä—é —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏
    r"\b–¥–∞–º\s+–æ—Ç–≤–µ—Ç\b",                               # –¥–∞–º –æ—Ç–≤–µ—Ç
    r"\b–ø–æ–≥–æ–≤–æ—Ä—é\s+—Å\s+–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏\s+–∏\s+–¥–∞–º\s+–æ—Ç–≤–µ—Ç\b", # –ø–æ–≥–æ–≤–æ—Ä—é —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏ –∏ –¥–∞–º –æ—Ç–≤–µ—Ç
]
FOLLOWUP_REGEX = re.compile("|".join(FOLLOWUP_PATTERNS_RO + FOLLOWUP_PATTERNS_RU), re.IGNORECASE)


# Anti-spam: rƒÉspunde doar o datƒÉ pe conversa»õie
FOLLOWUP_REPLIED: Dict[str, bool] = {}

# === FOLLOW-UP: c√¢nd clientul spune cƒÉ se g√¢nde»ôte »ôi revine ===
FOLLOWUP_TEXT_RO = (
    "DacƒÉ apar careva √ÆntrebƒÉri privitor la produsele noastre sau la alte lucruri legate de livrare, "
    "vƒÉ pute»õi adresa, noi mereu suntem dispu»ôi pentru a reveni cu un rƒÉspuns explicit üòä\n\n"
    "Pentru o comandƒÉ cu termen limitƒÉ rugƒÉm sƒÉ ne apela»õi din timp."
)

FOLLOWUP_TEXT_RU = (
    "–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞—à–∏–º —Ç–æ–≤–∞—Ä–∞–º –∏–ª–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ, "
    "–≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç üòä\n\n"
    "–î–ª—è –∑–∞–∫–∞–∑–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –ø—Ä–æ—Å–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ."
)

# === THANK YOU RESPONSE ===
THANK_YOU_TEXT = "Cu mare drag üíñ"

THANK_YOU_TEXT_RU = "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üíñ"

# RO ‚Äî thank you patterns (avoiding false positives like "nu, mul»õumesc")
THANK_YOU_PATTERNS_RO = [
    r"^(mer[cs]i|mul[»õt]umesc)[\s!.]*$",             # standalone mersi/mul»õumesc
    r"^(v[ƒÉa]\s+mul[»õt]umesc|v[ƒÉa]\s+mer[cs]i)[\s!.]*$",  # vƒÉ mul»õumesc/va mersi
    r"^(√Æ[»õt]i\s+mul[»õt]umesc|√Æ[»õt]i\s+mer[cs]i)[\s!.]*$", # √Æ»õi mul»õumesc/iti mersi
    r"^(mul[»õt]um)[\s!.]*$",                          # multum (short form)
    r"\bmer[cs]i\s+foarte\s+mult\b",                  # mersi foarte mult
    r"\bmul[»õt]umesc\s+foarte\s+mult\b",              # mul»õumesc foarte mult
    r"\bfoarte\s+mer[cs]i\b",                         # foarte mersi
    r"\bfoarte\s+mul[»õt]umesc\b",                     # foarte mul»õumesc
    r"\bmul[»õt]umesc\s+pentru\b",                     # mul»õumesc pentru
    r"\bmer[cs]i\s+pentru\b",                         # mersi pentru
    r"\bmul[»õt]umesc\s+mult\b",                       # mul»õumesc mult
    r"\bmer[cs]i\s+mult\b",                           # mersi mult
    # Additional patterns for common variations
    r"\bmul[»õt]umesc\s+frumos\b",                     # mul»õumesc frumos
    r"\bmer[cs]i\s+frumos\b",                         # mersi frumos
    r"\bmul[»õt]umesc\s+din\s+suflet\b",               # mul»õumesc din suflet
    r"\bmer[cs]i\s+din\s+suflet\b",                   # mersi din suflet
    r"\bmul[»õt]umesc\s+mul[»õt]umesc\b",               # mul»õumesc mul»õumesc (repeated)
    r"\bmer[cs]i\s+mer[cs]i\b",                       # mersi mersi (repeated)
    r"\b(mul[»õt]umesc\s+){2,}\b",                     # multiple mul»õumesc
    r"\b(mer[cs]i\s+){2,}\b",                         # multiple mersi
    # New patterns from analysis
    r"\bmul[»õt]umim\b",                                # multumim (we thank)
    r"\bv[ƒÉa]\s+mul[»õt]umim\b",                       # vƒÉ multumim
    r"\bmul[»õt]umim\s+mult\b",                        # multumim mult
    r"\bmul[»õt]umim\s+frumos\b",                      # multumim frumos
    r"\bmul[»õt]umim\s+foarte\s+mult\b",              # multumim foarte mult
    r"\bfoarte\s+frumos\s+mul[»õt]umesc\b",           # foarte frumos multumesc
    r"\bmul[»õt]umesc\s+de\s+idei\b",                  # multumesc de idei
    r"\bmul[»õt]umesc\s+de\s+informatii\b",           # multumesc de informatii
    r"\bmul[»õt]umesc\s+de\s+informatie\b",           # multumesc de informatie
    r"\bmul[»õt]umesc\s+pentru\s+comanda\b",          # multumesc pentru comanda
    r"\bmul[»õt]umim\s+mult\s*!*\b",                  # multumim mult!
    r"\bmul[»õt]umim\s+foarte\s+mult\s*!*\b",        # multumim foarte mult!
    r"\bmul[»õt]umim\s+mult\s*!*\s*Nu\s+se\s+va\s+schimba\b", # multumim mult! Nu se va schimba
    # Additional patterns for common variations without diacritics
    r"\bmultumesc\b",                                 # multumesc (without diacritics)
    r"\bmultumim\b",                                  # multumim (without diacritics)
    r"\bv[ƒÉa]\s+multumesc\b",                         # va multumesc (without diacritics)
    r"\bv[ƒÉa]\s+multumim\b",                          # va multumim (without diacritics)
    r"\bmultumesc\s+mult\b",                          # multumesc mult (without diacritics)
    r"\bmultumim\s+mult\b",                           # multumim mult (without diacritics)
    r"\bmultumesc\s+frumos\b",                        # multumesc frumos (without diacritics)
    r"\bmultumim\s+frumos\b",                         # multumim frumos (without diacritics)
    r"\bmultumesc\s+de\s+idei\b",                     # multumesc de idei (without diacritics)
    r"\bmultumesc\s+de\s+informatii\b",               # multumesc de informatii (without diacritics)
    r"\bmultumesc\s+de\s+informatie\b",               # multumesc de informatie (without diacritics)
    r"\bmultumesc\s+pentru\s+comanda\b",              # multumesc pentru comanda (without diacritics)
    r"\bmultumim\s+mult\s*!*\b",                      # multumim mult! (without diacritics)
    r"\bmultumim\s+foarte\s+mult\s*!*\b",            # multumim foarte mult! (without diacritics)
    r"\bmultumim\s+mult\s*!*\s*Nu\s+se\s+va\s+schimba\b", # multumim mult! Nu se va schimba (without diacritics)
]

# RU ‚Äî thank you patterns  
THANK_YOU_PATTERNS_RU = [
    r"^—Å–ø–∞—Å–∏–±–æ[\s!.]*$",                                    # —Å–ø–∞—Å–∏–±–æ
    r"^—Å–ø—Å[\s!.]*$",                                       # —Å–ø—Å (short form)
    r"\b–±–æ–ª—å—à–æ–µ\s+—Å–ø–∞—Å–∏–±–æ\b",                         # –±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ
    r"\b–æ–≥—Ä–æ–º–Ω–æ–µ\s+—Å–ø–∞—Å–∏–±–æ\b",                        # –æ–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ
    r"\b–±–ª–∞–≥–æ–¥–∞—Ä—é\b",                                 # –±–ª–∞–≥–æ–¥–∞—Ä—é
    r"\b–±–ª–∞–≥–æ–¥–∞—Ä[–∏—é]–º\b",                            # –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
    r"\b—Å–ø–∞—Å–∏–±–æ\s+–±–æ–ª—å—à–æ–µ\b",                         # —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ
    r"\b—Å–ø–∞—Å–∏–±–æ\s+–æ–≥—Ä–æ–º–Ω–æ–µ\b",                        # —Å–ø–∞—Å–∏–±–æ –æ–≥—Ä–æ–º–Ω–æ–µ
    r"\b–±–ª–∞–≥–æ–¥–∞—Ä–∏–º\s+–≤–∞—Å\b",                          # –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å
    r"\b–±–ª–∞–≥–æ–¥–∞—Ä—é\s+–≤–∞—Å\b",                           # –±–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å
]

THANK_YOU_REGEX = re.compile("|".join(THANK_YOU_PATTERNS_RO + THANK_YOU_PATTERNS_RU), re.IGNORECASE)

# === GOODBYE RESPONSE ===
GOODBYE_TEXT = "Numai bine ü§ó"

GOODBYE_TEXT_RU = "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ ü§ó"

# RO ‚Äî goodbye patterns
GOODBYE_PATTERNS_RO = [
    r"\bla\s+revedere\b",                             # la revedere
    r"\bo\s+zi\s+bun[ƒÉa]\b",                          # o zi bunƒÉ
    r"\bo\s+sear[ƒÉa]\s+bun[ƒÉa]\b",                    # o searƒÉ bunƒÉ
    r"\bo\s+sear[ƒÉa]\s+frumoas[ƒÉa]\b",                # o searƒÉ frumoasƒÉ
    r"\bo\s+noapte\s+bun[ƒÉa]\b",                      # o noapte bunƒÉ
    r"\bpa\b",                                        # pa (casual goodbye)
    r"\bciao\b",                                      # ciao
    r"\bbye\b",                                       # bye
    r"\bbye\s+bye\b",                                 # bye bye
    r"\bne\s+vedem\b",                                # ne vedem
    r"\bne\s+vedem\s+cur√¢nd\b",                       # ne vedem cur√¢nd
    r"\bne\s+vedem\s+mai\s+t[√¢a]rziu\b",             # ne vedem mai t√¢rziu
    r"\bpe\s+cur√¢nd\b",                               # pe cur√¢nd
    r"\bpe\s+mai\s+t[√¢a]rziu\b",                     # pe mai t√¢rziu
    r"\bziua\s+bun[ƒÉa]\b",                            # ziua bunƒÉ
    r"\bseara\s+bun[ƒÉa]\b",                           # seara bunƒÉ
    r"\bnoaptea\s+bun[ƒÉa]\b",                         # noaptea bunƒÉ
    r"\bpa\s+pa\b",                                   # pa pa
    
    # New patterns from analysis
    r"\bbine\b",                                      # bine (good)
    r"\bsear[ƒÉa]\s+pl[ƒÉa]cut[ƒÉa]\b",                  # searƒÉ plƒÉcutƒÉ
    r"\bsear[ƒÉa]\s+bun[ƒÉa]\b",                        # searƒÉ bunƒÉ
    r"\bsear[ƒÉa]\s+frumoas[ƒÉa]\b",                    # searƒÉ frumoasƒÉ
    r"\bzi\s+bun[ƒÉa]\b",                              # zi bunƒÉ
    r"\bzi\s+buna\b",                                 # zi buna
    r"\bziua\s+bun[ƒÉa]\b",                            # ziua bunƒÉ
    r"\bziua\s+buna\b",                               # ziua buna
    r"\bseara\s+pl[ƒÉa]cut[ƒÉa]\b",                    # seara plƒÉcutƒÉ
    r"\bseara\s+frumoas[ƒÉa]\b",                      # seara frumoasƒÉ
    r"\bseara\s+frumoasa\b",                         # seara frumoasa
    r"\bsear[ƒÉa]\s+minunat[ƒÉa]\b",                    # searƒÉ minunatƒÉ
    r"\bsear[ƒÉa]\s+minunata\b",                       # searƒÉ minunata
    r"\bseara\s+minunat[ƒÉa]\b",                      # seara minunatƒÉ
    r"\bseara\s+minunata\b",                          # seara minunata
    r"\bnoapte\s+bun[ƒÉa]\b",                         # noapte bunƒÉ
    r"\bnoapte\s+buna\b",                            # noapte buna
    r"\bnoaptea\s+bun[ƒÉa]\b",                        # noaptea bunƒÉ
    r"\bnoaptea\s+buna\b",                           # noaptea buna
]

# RU ‚Äî goodbye patterns  
GOODBYE_PATTERNS_RU = [
    r"\b–¥–æ\s+—Å–≤–∏–¥–∞–Ω–∏—è\b",                             # –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è
    r"\b–ø–æ–∫–∞\b",                                      # –ø–æ–∫–∞
    r"\b–ø–æ–∫–∞\s+–ø–æ–∫–∞\b",                               # –ø–æ–∫–∞ –ø–æ–∫–∞
    r"\b–¥–æ\s+–≤—Å—Ç—Ä–µ—á–∏\b",                              # –¥–æ –≤—Å—Ç—Ä–µ—á–∏
    r"\b–¥–æ\s+—Å–∫–æ—Ä–æ–π\s+–≤—Å—Ç—Ä–µ—á–∏\b",                     # –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏
    r"\b–¥–æ\s+—Å–∫–æ—Ä–æ–≥–æ\s+–≤—Å—Ç—Ä–µ—á–∏\b",                    # –¥–æ —Å–∫–æ—Ä–æ–≥–æ –≤—Å—Ç—Ä–µ—á–∏
    r"\b—Ö–æ—Ä–æ—à–µ–≥–æ\s+–¥–Ω—è\b",                            # —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è
    r"\b—Ö–æ—Ä–æ—à–µ–≥–æ\s+–≤–µ—á–µ—Ä–∞\b",                         # —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞
    r"\b—Å–ø–æ–∫–æ–π–Ω–æ–π\s+–Ω–æ—á–∏\b",                          # —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
    r"\b–¥–æ–±—Ä–æ–≥–æ\s+–¥–Ω—è\b",                             # –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è
    r"\b–¥–æ–±—Ä–æ–≥–æ\s+–≤–µ—á–µ—Ä–∞\b",                          # –¥–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞
    r"\b—É–≤–∏–¥–∏–º—Å—è\b",                                  # —É–≤–∏–¥–∏–º—Å—è
    r"\b—É–≤–∏–¥–∏–º—Å—è\s+—Å–∫–æ—Ä–æ\b",                          # —É–≤–∏–¥–∏–º—Å—è —Å–∫–æ—Ä–æ
    r"\b–¥–æ\s+–∑–∞–≤—Ç—Ä–∞\b",                               # –¥–æ –∑–∞–≤—Ç—Ä–∞
    r"\b–≤—Å–µ–≥–æ\s+–¥–æ–±—Ä–æ–≥–æ\b",                           # –≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ
    r"\b–≤—Å–µ–≥–æ\s+—Ö–æ—Ä–æ—à–µ–≥–æ\b",                          # –≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ
]

GOODBYE_REGEX = re.compile("|".join(GOODBYE_PATTERNS_RO + GOODBYE_PATTERNS_RU), re.IGNORECASE)

# === ACHITARE / PAYMENT: text + trigger intent (RO+RU) ===
PAYMENT_TEXT_RO = (
    "Punem accent pe achitare la primire, √ÆnsƒÉ √Æn cazul lucrƒÉrilor personalizate este nevoie de un avans."
)

PAYMENT_TEXT_RU = (
    "–û–±—ã—á–Ω–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏, –Ω–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (–∞–≤–∞–Ω—Å)."
)

# RO ‚Äî √ÆntrebƒÉri / fraze despre platƒÉ/achitare
PAYMENT_PATTERNS_RO = [
    r"\bcum\s+se\s+face\s+achitarea\b",
    r"\bachitarea\s+cum\s+se\s+realizeaz[ƒÉa]\b",  # "achitarea cum se realizeazƒÉ"
    r"\bplata\s+cum\s+se\s+realizeaz[ƒÉa]\b",       # "plata cum se realizeazƒÉ"
    r"\bcum\s+se\s+face\s+plata\b",
    r"\bcum\s+pl[ƒÉa]tesc\b",
    r"\bcum\s+achit\b",
    r"\bcum\s+se\s+achit[ƒÉa]\b",                   # "cum se achitƒÉ"
    r"\bcum\s+pot\s+achita\b",                     # "cum pot achita"
    r"\bmetod[ƒÉa]?\s+de\s+pl[ƒÉa]t[ƒÉa]\b",
    r"\bmodalit[ƒÉa][»õt]i\s+de\s+pl[ƒÉa]t[ƒÉa]\b",
    r"\bachitare\b", r"\bpl[ƒÉa]t[ƒÉa]\b",
    r"\bplata\s+la\s+livrare\b", r"\bramburs\b", r"\bnumerar\b",
    r"\btransfer\b", r"\bpe\s+card\b", r"\bcard\b",
    r"\bavans(ul)?\b", r"\bprepl[ƒÉa]t[ƒÉa]\b", r"\bprepay\b",
    
    # New patterns from screenshots analysis
    r"\bpute[»õt]i\s+sa\s+ne\s+da[»õt]i\s+cardul\b",     # pute»õi sa ne da»õi cardul
    r"\bpe\s+care\s+sa\s+transferam\b",                # pe care sa transferam
    r"\bcum\s+facem\s+cu\s+avansul\b",                 # cum facem cu avansul
    r"\bcum\s+v[ƒÉa]\s+transmit\s+avansul\b",            # cum vƒÉ transmit avansul
    r"\bavansul\s+cum\s+se\s+achita\b",                 # avansul cum se achita
    r"\bachitarea\s+avansului\s+cum\s+se\s+face\b",     # achitarea avansului cum se face
    r"\bunde\s+putem\s+face\s+avansul\b",               # unde putem face avansul
    r"\bc[√¢a]t\s+trebuie\s+sa\s+transfer\b",           # cat trebuie sa transfer
    r"\bcum\s+pot\s+sa\s+dau\s+avansul\b",             # cum pot sa dau avansul
    r"\bcum\s+pot\s+sa\s+il\s+achit\b",                 # cum pot sa il achit
    r"\bcum\s+pot\s+face\s+transferul\b",               # cum pot face transferul
    r"\bcum\s+sa\s+achietam\s+avansul\b",               # cum sa achietam avansul
    r"\bda[»õt]i\s+cardul\b",                            # da»õi cardul
    r"\btransferam\b",                                   # transferam
    r"\bfacem\s+cu\s+avansul\b",                        # facem cu avansul
    r"\btransmit\s+avansul\b",                           # transmit avansul
    r"\bavansul\s+se\s+achita\b",                       # avansul se achita
    r"\bachitarea\s+avansului\b",                       # achitarea avansului
    r"\bface\s+avansul\b",                               # face avansul
    r"\btransfer\b",                                     # transfer
    r"\bdau\s+avansul\b",                               # dau avansul
    r"\bachit\b",                                        # achit
    r"\btransferul\b",                                   # transferul
    r"\bachietam\s+avansul\b",                          # achietam avansul
    r"\bcardul\b",                                       # cardul
    r"\bda[»õt]i\b",                                      # da»õi
    r"\bne\s+da[»õt]i\b",                                # ne da»õi
    r"\bavansul\b",                                      # avansul
    r"\bavans\b",                                        # avans
    r"\bprepl[ƒÉa]t[ƒÉa]\b",                              # preplatƒÉ
    r"\bprepay\b",                                       # prepay
]

# RU ‚Äî √ÆntrebƒÉri / fraze despre platƒÉ/–æ–ø–ª–∞—Ç–∞
PAYMENT_PATTERNS_RU = [
    r"\b–∫–∞–∫\s+–æ–ø–ª–∞—Ç–∏—Ç—å\b",
    r"\b–∫–∞–∫\s+–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç\s+–æ–ø–ª–∞—Ç–∞\b",
    r"\b—Å–ø–æ—Å–æ–±(—ã)?\s+–æ–ø–ª–∞—Ç—ã\b",
    r"\b–æ–ø–ª–∞—Ç[–∞–∏]\b", r"\b–æ–ø–ª–∞—Ç–∞\b",
    r"\b–æ–ø–ª–∞—Ç–∞\s+–ø—Ä–∏\s+–ø–æ–ª—É—á–µ–Ω–∏[–∏—é]\b", r"\b–Ω–∞–ª–∏—á–Ω—ã–º–∏\b",
    r"\b–∫–∞—Ä—Ç–æ–π\b", r"\b–æ–ø–ª–∞—Ç–∞\s+–∫–∞—Ä—Ç–æ–π\b",
    r"\b–ø–µ—Ä–µ–≤–æ–¥(–æ–º)?\s+–Ω–∞\s+–∫–∞—Ä—Ç—É\b", r"\b–ø–µ—Ä–µ–≤–æ–¥\b",
    r"\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞\b", r"\b–∞–≤–∞–Ω—Å\b",
    r"\b–∫–∞–∫\s+–±—É–¥–µ—Ç\s+–æ–ø–ª–∞—Ç–∞\b", r"\b–æ–ø–ª–∞—Ç–∞\s+–∫–∞–∫\b",
]

PAYMENT_REGEX = re.compile("|".join(PAYMENT_PATTERNS_RO + PAYMENT_PATTERNS_RU), re.IGNORECASE)

# Anti-spam platƒÉ: o singurƒÉ datƒÉ per user/conversa»õie
# ‚Äî AVANS / PREPAY exact amount ‚Äî
ADVANCE_TEXT_RO = (
    "Avansul e √Æn sumƒÉ de 200 lei, se achitƒÉ doar pentru lucrƒÉrile personalizate!"
)

ADVANCE_TEXT_RU = (
    "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 200 –ª–µ–π –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç!"
)

# RO ‚Äî √ÆntrebƒÉri specifice despre avans (doar generale, nu sumƒÉ/metodƒÉ)
ADVANCE_PATTERNS_RO = [
    r"\beste\s+nevoie\s+de\s+avans\b",
    r"\bce\s+avans\s+e\s+nevoie\b",                 # ce avans e nevoie?
    r"\bc[√¢a]t\s+este\s+nevoie\s+pentru\s+avans\b", # cat este nevoie pentru avans?
    r"\btrebuie\s+avans\b",
    r"\bavans\s+este\s+necesar\b",                  # avans este necesar?
    r"\beste\s+necesar\s+avans\b",                  # este necesar avans?
    r"\bavans\s+obligatoriu\b",                     # avans obligatoriu?
    r"\bobligatoriu\s+avans\b",                     # obligatoriu avans?
    r"\bavans\s+necesar\b",                         # avans necesar?
    r"\bnecesar\s+avans\b",                         # necesar avans?
    r"\bc[√¢a]t\s+trebuie\s+s[ƒÉa]\s+achit\b.*avans", # c√¢t trebuie sƒÉ achit avans?
    r"\bprepl[ƒÉa]t[ƒÉa]\b",                          # preplatƒÉ (rom/rus mix folosit)
]

# RU ‚Äî √ÆntrebƒÉri specifice despre –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞/–∞–≤–∞–Ω—Å (doar generale, nu sumƒÉ/metodƒÉ)
ADVANCE_PATTERNS_RU = [
    r"\b–Ω—É–∂–Ω[–∞—ã]\s+–ª–∏\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞\b",
    r"\b–Ω—É–∂–µ–Ω\s+–ª–∏\s+–∞–≤–∞–Ω—Å\b",
    r"\b—Å–∫–æ–ª—å–∫–æ\s+–Ω—É–∂–Ω–æ\s+–≤–Ω–µ—Å—Ç–∏\b",
    r"\b–Ω–∞–¥–æ\s+–ª–∏\s+–≤–Ω–æ—Å–∏—Ç—å\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É\b",
    r"\b–Ω—É–∂–Ω[–∞—ã]\s+–ª–∏\s+–∞–≤–∞–Ω—Å\b",                    # –Ω—É–∂–Ω—ã –ª–∏ –∞–≤–∞–Ω—Å?
    r"\b–Ω—É–∂–µ–Ω\s+–ª–∏\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞\b",                  # –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞?
    r"\b–æ–±—è–∑–∞—Ç–µ–ª—å–Ω[–∞—ã]\s+–ª–∏\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\b",      # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞?
    r"\b–æ–±—è–∑–∞—Ç–µ–ª—å–Ω[–∞—ã]\s+–ª–∏\s+–∞–≤–∞–Ω—Å\b",             # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ª–∏ –∞–≤–∞–Ω—Å?
    r"\b–æ–±—è–∑–∞—Ç–µ–ª—å–Ω[–∞—ã]\s+–ª–∏\s+–≤–Ω–æ—Å–∏—Ç—å\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—É—ã]\b", # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ª–∏ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É?
    r"\b–æ–±—è–∑–∞—Ç–µ–ª—å–Ω[–∞—ã]\s+–ª–∏\s+–≤–Ω–æ—Å–∏—Ç—å\s+–∞–≤–∞–Ω—Å\b",    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ª–∏ –≤–Ω–æ—Å–∏—Ç—å –∞–≤–∞–Ω—Å?
    r"\b—Ç—Ä–µ–±—É–µ—Ç—Å—è\s+–ª–∏\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\b",           # —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞?
    r"\b—Ç—Ä–µ–±—É–µ—Ç—Å—è\s+–ª–∏\s+–∞–≤–∞–Ω—Å\b",                  # —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∞–≤–∞–Ω—Å?
    r"\b–Ω–µ–æ–±—Ö–æ–¥–∏–º[–∞—ã]\s+–ª–∏\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\b",       # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞?
    r"\b–Ω–µ–æ–±—Ö–æ–¥–∏–º[–∞—ã]\s+–ª–∏\s+–∞–≤–∞–Ω—Å\b",              # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ª–∏ –∞–≤–∞–Ω—Å?
]
ADVANCE_REGEX = re.compile("|".join(ADVANCE_PATTERNS_RO + ADVANCE_PATTERNS_RU), re.IGNORECASE)


# ‚Äî AVANS: √ÆntrebƒÉri despre SUMƒÇ (RO / RU) ‚Äî
ADVANCE_AMOUNT_PATTERNS_RO = [
    r"\bc[√¢a]t\s+(?:e|este)\s+avans(ul)?\b",
    r"\bc[√¢a]t\s+avans(ul)?\b",
    r"\bcat\s+este\s+avansul\b",                     # cat este avansul?
    r"\bcit\s+este\s+avansul\b",                     # cit este avansul? (colloquial)
    r"\bcit\s+e\s+avansul\b",                        # cit e avansul? (colloquial)
    r"\bcit\s+avansul\b",                            # cit avansul? (colloquial)
    r"\bavansul\s+cit\s+(?:e|este)\b",               # avansul cit e? (colloquial)
    r"\bc[√¢a]t\s+este\s+nevoie\s+pentru\s+avans\b",  # cat este nevoie pentru avans?
    r"\bcare\s+e\s+suma\s+(?:de\s+)?avans(ului)?\b",
    r"\bce\s+suma\s+are\s+avansul\b",
    r"\bce\s+sum[ƒÉa]\s+e\s+avansul\b",              # ce sumƒÉ e avansul?
    r"\bce\s+sum[ƒÉa]\s+avans\b",                     # ce sumƒÉ avans?
    r"\bavans\s+c[√¢a]t\b",                          # avans c√¢t?
    r"\bavans\s+cat\b",                              # avans cat?
    r"\bavans\s+cit\b",                              # avans cit? (colloquial)
    r"\bavans\s+care\s+suma\b",                      # avans care suma?
    r"\bavans\s+ce\s+suma\b",                       # avans ce suma?
    r"\bavans\s+ce\s+sum[ƒÉa]\b",                    # avans ce sumƒÉ?
    r"\bavans\s+suma\b",                            # avans suma?
    r"\bsuma\s+avans(ului)?\b",
    r"\bavansul\s+(?:de|este)\s*\?\b",
    r"\bavansul\s+cit\s*\?\b",                       # avansul cit? (colloquial)
    r"\bavans\s+(?:de|este)\s+\d+\b",
    r"\bavans\s+lei\b",                              # avans lei?
    r"\bavans\s+bani\b",                            # avans bani?
    r"\bavans\s+bani\s+c[√¢a]t\b",                   # avans bani c√¢t?
    r"\bavans\s+bani\s+cat\b",                      # avans bani cat?
    r"\bavans\s+bani\s+cit\b",                      # avans bani cit? (colloquial)
    
    # New patterns from screenshots analysis
    r"\bc[√¢a]t\s+trebuie\s+sa\s+transfer\b",         # cat trebuie sa transfer
    r"\bc[√¢a]t\s+trebuie\s+s[ƒÉa]\s+transfer\b",      # c√¢t trebuie sƒÉ transfer
    r"\bcit\s+trebuie\s+sa\s+transfer\b",            # cit trebuie sa transfer (colloquial)
    r"\bcit\s+trebuie\s+s[ƒÉa]\s+transfer\b",         # cit trebuie sƒÉ transfer (colloquial)
    r"\bc[√¢a]t\s+trebuie\s+transfer\b",              # c√¢t trebuie transfer
    r"\bcit\s+trebuie\s+transfer\b",                 # cit trebuie transfer (colloquial)
    r"\bc[√¢a]t\s+transfer\b",                        # c√¢t transfer
    r"\bcit\s+transfer\b",                           # cit transfer (colloquial)
    r"\btransfer\s+c[√¢a]t\b",                        # transfer c√¢t
    r"\btransfer\s+cat\b",                          # transfer cat
    r"\btransfer\s+cit\b",                          # transfer cit (colloquial)
    r"\bc[√¢a]t\s+suma\s+transfer\b",                # c√¢t suma transfer
    r"\bcit\s+suma\s+transfer\b",                   # cit suma transfer (colloquial)
    r"\bc[√¢a]t\s+suma\s+trebuie\s+transfer\b",      # c√¢t suma trebuie transfer
    r"\bcit\s+suma\s+trebuie\s+transfer\b",         # cit suma trebuie transfer (colloquial)
    r"\bsuma\s+transfer\b",                          # suma transfer
    r"\bsuma\s+trebuie\s+transfer\b",                # suma trebuie transfer
    r"\btransfer\s+suma\b",                          # transfer suma
    r"\btransfer\s+avans\b",                         # transfer avans
    r"\bavans\s+transfer\b",                         # avans transfer
    r"\bc[√¢a]t\s+avans\s+transfer\b",                # c√¢t avans transfer
    r"\bcit\s+avans\s+transfer\b",                   # cit avans transfer (colloquial)
    r"\bavans\s+c[√¢a]t\s+transfer\b",                # avans c√¢t transfer
    r"\bavans\s+cit\s+transfer\b",                   # avans cit transfer (colloquial)
]

ADVANCE_AMOUNT_PATTERNS_RU = [
    r"\b—Å–∫–æ–ª—å–∫–æ\s+(?:–Ω—É–∂–Ω–æ\s+)?–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—ã—ã—É]\b",
    r"\b—Å–∫–æ–ª—å–∫–æ\s+–Ω—É–∂–Ω–æ\s+–¥–ª—è\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—ã—ã]\b",  # —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã?
    r"\b–∫–∞–∫–∞—è\s+—Å—É–º–º–∞\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—ã—ã]\b",
    r"\b–∫–∞–∫[–∞—è–æ–π]\s+(?:–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]|–∞–≤–∞–Ω—Å)\b",     # –∫–∞–∫–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞? / –∫–∞–∫–æ–π –∞–≤–∞–Ω—Å?
    r"\b–∫–∞–∫–æ–π\s+–∞–≤–∞–Ω—Å\b",                          # –∫–∞–∫–æ–π –∞–≤–∞–Ω—Å?
    r"\b–∫–∞–∫–∞—è\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\b",                  # –∫–∞–∫–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞?
    r"\b–∫–∞–∫–æ[–π—è]\s+—Ä–∞–∑–º–µ—Ä\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—ã—ã]\b",
    r"\b—Å–∫–æ–ª—å–∫–æ\s+–∞–≤–∞–Ω—Å\b",
    r"\b–∞–≤–∞–Ω—Å\s+—Å–∫–æ–ª—å–∫–æ\b",
    r"\b—Å—É–º–º–∞\s+–∞–≤–∞–Ω—Å–∞\b",
    r"\b–∞–≤–∞–Ω—Å\s+—Å—É–º–º–∞\b",                          # –∞–≤–∞–Ω—Å —Å—É–º–º–∞?
    r"\b–∞–≤–∞–Ω—Å\s+—Ä–∞–∑–º–µ—Ä\b",                         # –∞–≤–∞–Ω—Å —Ä–∞–∑–º–µ—Ä?
    r"\b–∞–≤–∞–Ω—Å\s+—Ä–∞–∑–º–µ—Ä\s+—Å–∫–æ–ª—å–∫–æ\b",               # –∞–≤–∞–Ω—Å —Ä–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∫–æ?
    r"\b–∞–≤–∞–Ω—Å\s+—Å–∫–æ–ª—å–∫–æ\s+–¥–µ–Ω–µ–≥\b",                # –∞–≤–∞–Ω—Å —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥?
    r"\b–∞–≤–∞–Ω—Å\s+–¥–µ–Ω—å–≥–∏\b",                         # –∞–≤–∞–Ω—Å –¥–µ–Ω—å–≥–∏?
    r"\b–∞–≤–∞–Ω—Å\s+–ª–µ–π\b",                           # –∞–≤–∞–Ω—Å –ª–µ–π?
    r"\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\s+—Å–∫–æ–ª—å–∫–æ\b",               # –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Å–∫–æ–ª—å–∫–æ?
    r"\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\s+—Å—É–º–º–∞\b",                  # –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Å—É–º–º–∞?
    r"\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\s+—Ä–∞–∑–º–µ—Ä\b",                 # –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Ä–∞–∑–º–µ—Ä?
    r"\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\s+–ª–µ–π\b",                    # –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –ª–µ–π?
    r"\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]\s+–¥–µ–Ω—å–≥–∏\b",                 # –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –¥–µ–Ω—å–≥–∏?
]
ADVANCE_AMOUNT_REGEX = re.compile("|".join(ADVANCE_AMOUNT_PATTERNS_RO + ADVANCE_AMOUNT_PATTERNS_RU), re.IGNORECASE)

# ‚Äî AVANS: metoda de platƒÉ (RO / RU) ‚Äî
ADVANCE_METHOD_TEXT_RO = (
    "Avansul se poate achita prin transfer pe card.\n\n"
    "5397 0200 6122 9082 cont MAIB\n\n"
    "062176586 MIA plƒÉ»õi instant\n\n"
    "DupƒÉ transfer, expedia»õi o pozƒÉ a chitan»õei, pentru confirmarea transferului."
)

ADVANCE_METHOD_TEXT_RU = (
    "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É.\n\n"
    "5397 0200 6122 9082 (—Å—á—ë—Ç MAIB)\n\n"
    "062176586 MIA ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n\n"
    "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
)

# RO ‚Äî cum se achitƒÉ avansul (metodƒÉ / detalii card)
ADVANCE_METHOD_PATTERNS_RO = [
    r"\bcum\s+se\s+poate\s+achita\s+avansul\b",
    r"\bcum\s+pl[ƒÉa]tesc\s+avansul\b",
    r"\bcum\s+pl[ƒÉa]tim\s+avansul\b",              # cum plƒÉtim avansul?
    r"\bcum\s+pot\s+pl[ƒÉa]ti\s+avansul\b",         # cum pot plƒÉti avansul?
    r"\bcum\s+pot\s+achita\s+avansul\b",           # cum pot achita avansul?
    r"\bcum\s+se\s+achit[ƒÉa]\s+avansul\b",         # cum se achitƒÉ avansul?
    r"\bmetod[ƒÉa]?\s+de\s+pl[ƒÉa]t[ƒÉa]\s+pentru\s+avans\b",
    r"\bmetod[ƒÉa]?\s+de\s+achitare\s+avans\b",     # metodƒÉ de achitare avans?
    r"\bachitare\s+avans\b", r"\bplata\s+avansului\b",
    r"\btransfer\s+pe\s+card\b", r"\bpe\s+card\s+avans\b",
    r"\bpot\s+pl[ƒÉa]ti\s+avansul\s+cu\s+card(ul)?\b",
    r"\bpot\s+achita\s+avansul\s+cu\s+card(ul)?\b", # pot achita avansul cu card?
    r"\bavans\s+card\b",                           # avans card?
    r"\bavans\s+transfer\b",                       # avans transfer?
    r"\bavans\s+pe\s+card\b",                      # avans pe card?
    r"\bdetali[ii]le?\s+card(ului)?\b", r"\bdate\s+card(ului)?\b",
    r"\bnum[aƒÉ]r(ul)?\s+de\s+card(ului)?\b", r"\bnum[aƒÉ]r(ul)?\s+card(ului)?\b",
    r"\bunde\s+pot\s+pl[ƒÉa]ti\s+avansul\b",
    r"\bunde\s+pot\s+achita\s+avansul\b",          # unde pot achita avansul?
    r"\bcont\s+maib\b", r"\bpl[ƒÉa]»õi\s+instant\b", r"\bplati\s+instant\b",
    r"\bavans\s+cont\b",                           # avans cont?
    r"\bavans\s+maib\b",                          # avans maib?
    r"\bavans\s+instant\b",                       # avans instant?
    
    # New patterns from screenshots analysis
    r"\bcum\s+pot\s+sa\s+dau\s+avansul\b",         # cum pot sa dau avansul
    r"\bcum\s+pot\s+sa\s+il\s+achit\b",             # cum pot sa il achit
    r"\bcum\s+pot\s+face\s+transferul\b",           # cum pot face transferul
    r"\bcum\s+sa\s+achietam\s+avansul\b",           # cum sa achietam avansul
    r"\bcum\s+pot\s+dau\s+avansul\b",               # cum pot dau avansul
    r"\bcum\s+pot\s+il\s+achit\b",                   # cum pot il achit
    r"\bcum\s+pot\s+face\s+transferul\b",           # cum pot face transferul
    r"\bcum\s+sa\s+achietam\s+avansul\b",           # cum sa achietam avansul
    r"\bdau\s+avansul\b",                           # dau avansul
    r"\bachit\b",                                   # achit
    r"\btransferul\b",                              # transferul
    r"\bachietam\s+avansul\b",                      # achietam avansul
    r"\bface\s+transferul\b",                       # face transferul
    r"\bface\s+avansul\b",                          # face avansul
    r"\bpot\s+dau\s+avansul\b",                      # pot dau avansul
    r"\bpot\s+il\s+achit\b",                        # pot il achit
    r"\bpot\s+face\s+transferul\b",                 # pot face transferul
    r"\bsa\s+achietam\s+avansul\b",                 # sa achietam avansul
    r"\bsa\s+dau\s+avansul\b",                      # sa dau avansul
    r"\bsa\s+il\s+achit\b",                         # sa il achit
    r"\bsa\s+face\s+transferul\b",                  # sa face transferul
    
    # Additional patterns for specific screenshot messages
    r"\bpute[»õt]i\s+sa\s+ne\s+da[»õt]i\s+cardul\b",     # pute»õi sa ne da»õi cardul
    r"\bpe\s+care\s+sa\s+transferam\b",                # pe care sa transferam
    r"\bcum\s+facem\s+cu\s+avansul\b",                 # cum facem cu avansul
    r"\bcum\s+v[ƒÉa]\s+transmit\s+avansul\b",            # cum vƒÉ transmit avansul
    r"\bavansul\s+cum\s+se\s+achita\b",                 # avansul cum se achita
    r"\bachitarea\s+avansului\s+cum\s+se\s+face\b",     # achitarea avansului cum se face
    r"\bda[»õt]i\s+cardul\b",                            # da»õi cardul
    r"\btransferam\b",                                   # transferam
    r"\bfacem\s+cu\s+avansul\b",                        # facem cu avansul
    r"\btransmit\s+avansul\b",                           # transmit avansul
    r"\bavansul\s+se\s+achita\b",                       # avansul se achita
    r"\bachitarea\s+avansului\b",                       # achitarea avansului
    r"\bse\s+achita\b",                                  # se achita
    r"\bse\s+face\b",                                    # se face
    r"\bavansul\b",                                      # avansul
    r"\bavans\b",                                        # avans
    r"\bcardul\b",                                       # cardul
    r"\bda[»õt]i\b",                                      # da»õi
    r"\bne\s+da[»õt]i\b",                                # ne da»õi
    r"\btransferam\b",                                   # transferam
    r"\bfacem\b",                                        # facem
    r"\btransmit\b",                                     # transmit
    r"\bachita\b",                                       # achita
    r"\bachitarea\b",                                    # achitarea
    r"\bavansului\b",                                    # avansului
]

# RU ‚Äî –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É (–º–µ—Ç–æ–¥ / —Ä–µ–∫–≤–∏–∑–∏—Ç—ã)
ADVANCE_METHOD_PATTERNS_RU = [
    r"\b–∫–∞–∫\s+(?:–æ–ø–ª–∞—Ç–∏—Ç—å|–≤–Ω–µ—Å—Ç–∏)\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—É]\b",
    r"\b–∫–∞–∫\s+(?:–æ–ø–ª–∞—Ç–∏—Ç—å|–≤–Ω–µ—Å—Ç–∏)\s+–∞–≤–∞–Ω—Å\b",
    r"\b–∫–∞–∫\s+–º–æ–∂–Ω–æ\s+–æ–ø–ª–∞—Ç–∏—Ç—å\s+–∞–≤–∞–Ω—Å\b",         # –∫–∞–∫ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∞–≤–∞–Ω—Å?
    r"\b–∫–∞–∫\s+–º–æ–∂–Ω–æ\s+–≤–Ω–µ—Å—Ç–∏\s+–∞–≤–∞–Ω—Å\b",           # –∫–∞–∫ –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å?
    r"\b–∫–∞–∫\s+–º–æ–∂–Ω–æ\s+–æ–ø–ª–∞—Ç–∏—Ç—å\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—É—ã]\b", # –∫–∞–∫ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É?
    r"\b–∫–∞–∫\s+–º–æ–∂–Ω–æ\s+–≤–Ω–µ—Å—Ç–∏\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—É—ã]\b",   # –∫–∞–∫ –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É?
    r"\b–æ–ø–ª–∞—Ç–∞\s+–∞–≤–∞–Ω—Å[–∞]?\b", r"\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞\s+–∫–∞–∫\b",
    r"\b–∞–≤–∞–Ω—Å\s+–∫–∞–∫\b",                            # –∞–≤–∞–Ω—Å –∫–∞–∫?
    r"\b–∞–≤–∞–Ω—Å\s+–æ–ø–ª–∞—Ç–∏—Ç—å\b",                       # –∞–≤–∞–Ω—Å –æ–ø–ª–∞—Ç–∏—Ç—å?
    r"\b–∞–≤–∞–Ω—Å\s+–≤–Ω–µ—Å—Ç–∏\b",                         # –∞–≤–∞–Ω—Å –≤–Ω–µ—Å—Ç–∏?
    r"\b–∞–≤–∞–Ω—Å\s+–ø–µ—Ä–µ–≤–æ–¥\b",                        # –∞–≤–∞–Ω—Å –ø–µ—Ä–µ–≤–æ–¥?
    r"\b–∞–≤–∞–Ω—Å\s+–∫–∞—Ä—Ç–∞\b",                          # –∞–≤–∞–Ω—Å –∫–∞—Ä—Ç–∞?
    r"\b–∞–≤–∞–Ω—Å\s+–∫–∞—Ä—Ç–æ–π\b",                         # –∞–≤–∞–Ω—Å –∫–∞—Ä—Ç–æ–π?
    r"\b–ø–µ—Ä–µ–≤–æ–¥\s+–Ω–∞\s+–∫–∞—Ä—Ç—É\b", r"\b–∫–∞—Ä—Ç–æ–π\s+–º–æ–∂–Ω–æ\b",
    r"\b—Ä–µ–∫–≤–∏–∑–∏—Ç[—ã–∞]\b", r"\b–Ω–æ–º–µ—Ä\s+–∫–∞—Ä—Ç—ã\b",
    r"\b–∫—É–¥–∞\s+–ø–µ—Ä–µ–≤–µ—Å—Ç[—å–∏]\b", r"\b–∫–∞–∫\s+—Å–¥–µ–ª–∞—Ç—å\s+–ø–µ—Ä–µ–≤–æ–¥\b",
    r"\b–∫—É–¥–∞\s+–æ–ø–ª–∞—Ç–∏—Ç—å\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—É—ã]\b",
    r"\b–∫—É–¥–∞\s+–æ–ø–ª–∞—Ç–∏—Ç—å\s+–∞–≤–∞–Ω—Å\b",                # –∫—É–¥–∞ –æ–ø–ª–∞—Ç–∏—Ç—å –∞–≤–∞–Ω—Å?
    r"\b–∫—É–¥–∞\s+–≤–Ω–µ—Å—Ç–∏\s+–∞–≤–∞–Ω—Å\b",                  # –∫—É–¥–∞ –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å?
    r"\b–∫—É–¥–∞\s+–≤–Ω–µ—Å—Ç–∏\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[—É—ã]\b",          # –∫—É–¥–∞ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É?
    r"\b—Ä–µ–∫–≤–∏–∑–∏—Ç—ã\s+–¥–ª—è\s+–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã\b",
    r"\b—Ä–µ–∫–≤–∏–∑–∏—Ç—ã\s+–¥–ª—è\s+–∞–≤–∞–Ω—Å–∞\b",               # —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∞–≤–∞–Ω—Å–∞?
    r"\b–º–≥–Ω–æ–≤–µ–Ω–Ω[–∞—ã]–µ\s+–ø–ª–∞—Ç–µ–∂–∏\b",
    r"\b–∞–≤–∞–Ω—Å\s+–º–≥–Ω–æ–≤–µ–Ω–Ω–æ\b",                      # –∞–≤–∞–Ω—Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ?
    r"\b–∞–≤–∞–Ω—Å\s+–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ\b",                     # –∞–≤–∞–Ω—Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ?
    r"\b–∞–≤–∞–Ω—Å\s+maib\b",                          # –∞–≤–∞–Ω—Å maib?
    r"\b–∞–≤–∞–Ω—Å\s+—Å—á—ë—Ç\b",                          # –∞–≤–∞–Ω—Å —Å—á—ë—Ç?
    r"\b–∞–≤–∞–Ω—Å\s+—Å—á–µ—Ç\b",                          # –∞–≤–∞–Ω—Å —Å—á–µ—Ç?
]
ADVANCE_METHOD_REGEX = re.compile("|".join(ADVANCE_METHOD_PATTERNS_RO + ADVANCE_METHOD_PATTERNS_RU), re.IGNORECASE)

# === PRICE INTENT PATTERNS FOR COMMENTS ===
# RO ‚Äî √ÆntrebƒÉri despre pre»õ √Æn comentarii
COMMENT_PRICE_PATTERNS_RO = [
    r"\bc[√¢a]t\s+cost[ƒÉa]\b",
    r"\bce\s+pre[»õt]\b",
    r"\bpre[»õt]ul\b",
    r"\bpre[»õt]\b",
    r"\bcost\b",
    r"\bc[√¢a]t\s+vine\b",
    r"\bpe\s+c[√¢a]t\b",
]

# RU ‚Äî –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
COMMENT_PRICE_PATTERNS_RU = [
    r"\b—Å–∫–æ–ª—å–∫–æ\s+—Å—Ç–æ–∏—Ç\b",
    r"\b–∫–∞–∫–∞—è\s+—Ü–µ–Ω–∞\b",
    r"\b—Ü–µ–Ω–∞\b",
    r"\b—Å—Ç–æ–∏–º–æ—Å—Ç—å\b",
    r"\b—Å–∫–æ–ª—å–∫–æ\b",
    r"\b–ø–æ—á–µ–º\b",
]

COMMENT_PRICE_REGEX = re.compile("|".join(COMMENT_PRICE_PATTERNS_RO + COMMENT_PRICE_PATTERNS_RU), re.IGNORECASE)

_AMOUNT_HINT_RE = re.compile(r"\b(c[√¢a]t|suma|lei)\b|\d{2,}", re.IGNORECASE)

def _select_payment_message(lang: str, text: str) -> str:
    """
    Selector pentru tema 'platƒÉ':
      1) dacƒÉ e √Æntrebare despre SUMA avansului -> 200 lei
      2) dacƒÉ e √Æntrebare despre METODA de achitare -> detalii card
      3) altfel -> mesajul general despre platƒÉ
    """
    low = (text or "").lower()
    has_cyr = bool(CYRILLIC_RE.search(low))

    # 1) SUMA avansului (prioritar)
    if ADVANCE_AMOUNT_REGEX.search(low):
        return ADVANCE_TEXT_RU if has_cyr or lang == "RU" else ADVANCE_TEXT_RO

    # Guard: ‚Äúavans‚Äù/‚Äû–ø—Ä–µ–¥–æ–ø–ª–∞—Ç‚Ä¶/–∞–≤–∞–Ω—Å‚Äù + (c√¢t/sumƒÉ/lei/numƒÉr) -> trateazƒÉ ca SUMƒÇ
    if ("avans" in low or "–ø—Ä–µ–¥–æ–ø–ª–∞—Ç" in low or "–∞–≤–∞–Ω—Å" in low) and _AMOUNT_HINT_RE.search(low):
        return ADVANCE_TEXT_RU if has_cyr or lang == "RU" else ADVANCE_TEXT_RO

    # 2) METODA de achitare (card/rechizite)
    if ADVANCE_METHOD_REGEX.search(low):
        return ADVANCE_METHOD_TEXT_RU if has_cyr or lang == "RU" else ADVANCE_METHOD_TEXT_RO

    # 3) General ‚Äúcum se face achitarea?‚Äù
    return PAYMENT_TEXT_RU if has_cyr or lang == "RU" else PAYMENT_TEXT_RO


# ---------- Helpers comune ----------
def _verify_signature() -> bool:
    """VerificƒÉ X-Hub-Signature-256 dacƒÉ APP_SECRET e setat."""
    if not APP_SECRET:
        return True
    sig = request.headers.get("X-Hub-Signature-256", "")
    if not sig.startswith("sha256="):
        return False
    digest = hmac.new(APP_SECRET.encode(), request.data, hashlib.sha256).hexdigest()
    return hmac.compare_digest(sig[7:], digest)

def _is_duplicate_mid(mid: str) -> bool:
    """Dedup DM dupƒÉ MID (5 min)."""
    now = time.time()
    last = SEEN_MIDS.get(mid, 0.0)
    if now - last < DEDUP_TTL_SEC:
        return True
    SEEN_MIDS[mid] = now
    # curƒÉ»õare ocazionalƒÉ
    for k, ts in list(SEEN_MIDS.items()):
        if now - ts > DEDUP_TTL_SEC:
            SEEN_MIDS.pop(k, None)
    return False

def _should_send_offer(sender_id: str) -> bool:
    """Anti-spam: o singurƒÉ ofertƒÉ per user per conversa»õie (o singurƒÉ datƒÉ)."""
    if OFFER_SENT.get(sender_id):
        return False
    OFFER_SENT[sender_id] = True  # set BEFORE sending to prevent race conditions
    return True

def _is_manual_greeting(text: str) -> bool:
    """
    DetecteazƒÉ dacƒÉ mesajul este un salut manual (trimis de business owner).
    """
    if not text:
        return False
    
    # Clean text for better matching
    clean_text = _clean_emoji_for_matching(text)
    return bool(MANUAL_GREETING_REGEX.search(clean_text))

def _should_send_greeting(sender_id: str, text: str) -> str | None:
    """
    ReturneazƒÉ 'RO' sau 'RU' dacƒÉ trebuie sƒÉ trimitƒÉ salutul ini»õial.
    AsigurƒÉ o singurƒÉ trimitere per conversa»õie (anti-spam).
    Trimite salut automat pentru toate mesajele de la clien»õi (inclusiv cele cu salut manual).
    """
    if not text:
        return None
    
    # VerificƒÉ dacƒÉ am trimis deja salutul √Æn aceastƒÉ conversa»õie
    if GREETING_SENT.get(sender_id):
        app.logger.info("[GREETING_SKIP] sender=%s already greeted", sender_id)
        return None
    
    # SeteazƒÉ flag-ul √Ænainte de trimitere pentru a preveni race conditions
    GREETING_SENT[sender_id] = True
    
    # DeterminƒÉ limba bazatƒÉ pe textul primit
    lang = "RU" if CYRILLIC_RE.search(text) else "RO"
    
    # Log dacƒÉ este un salut manual de la client
    if _is_manual_greeting(text):
        app.logger.info("[MANUAL_GREETING_DETECTED] sender=%s text=%r - sending greeting first", sender_id, text)
    else:
        app.logger.info("[GREETING_TRIGGER] sender=%s text=%r lang=%s", sender_id, text, lang)
    
    return lang

def _detect_multiple_intents(sender_id: str, text: str) -> list[tuple[str, str]]:
    """
    DetecteazƒÉ multiple inten»õii √Æntr-un singur mesaj.
    ReturneazƒÉ lista de (intent_type, language) pentru fiecare inten»õie detectatƒÉ.
    
    Intent types: 'offer', 'delivery', 'eta', 'payment', 'followup', 'thank_you', 'goodbye'
    """
    if not text:
        return []
    
    intents = []
    has_cyr = bool(CYRILLIC_RE.search(text))
    lang = "RU" if has_cyr else "RO"
    
    # 1. DetecteazƒÉ livrare (cu sau fƒÉrƒÉ loca»õie) - PRIORITATE √éNALTƒÇ
    # VerificƒÉ mai √Ænt√¢i dacƒÉ are loca»õie specificƒÉ (chiar dacƒÉ nu are cuvinte de livrare)
    location = _detect_location(text)
    if location:
        # DacƒÉ are loca»õie, verificƒÉ dacƒÉ √ÆntreabƒÉ despre livrare sau este o √Æntrebare generalƒÉ despre loca»õie
        delivery_keywords = [
            'livrare', 'livra»õi', 'livrarea', 'livrƒÉm', 'transport', 'curier', 'po»ôtƒÉ',
            'dacƒÉ', 'daca', 'dacƒÉ mƒÉ', 'daca ma', 'dacƒÉ sunt', 'daca sunt', 
            'dacƒÉ mƒÉ aflu', 'daca ma aflu', 'cum se face', 'cum se', 'cum poate',
            '√Æn', 'la', 'pentru'
        ]
        
        has_delivery_intent = (
            DELIVERY_REGEX.search(text) or 
            any(keyword in text.lower() for keyword in delivery_keywords)
        )
        
        if has_delivery_intent:
            intents.append(('location_delivery', lang))
    elif DELIVERY_REGEX.search(text):
        # DacƒÉ nu are loca»õie specificƒÉ dar √ÆntreabƒÉ despre livrare
        intents.append(('delivery', lang))
    
    # 2. DetecteazƒÉ ofertƒÉ (pre»õ/catalog/detalii) - doar dacƒÉ nu s-a detectat deja livrare cu loca»õie
    if not any(intent[0] in ['location_delivery', 'delivery'] for intent in intents):
        # Check for price terms directly
        ro_norm = _norm_ro(text)
        ro_toks = set(ro_norm.split())
        ru_toks = set(re.sub(r"[^\w\s]", " ", text.lower()).split())
        
        # Romanian price detection
        if not has_cyr and (ro_toks & RO_PRICE_TERMS):
            intents.append(('offer', lang))
        # Russian price detection  
        elif has_cyr and (ru_toks & RU_PRICE_TERMS):
            intents.append(('offer', lang))
    
    # 3. DetecteazƒÉ ETA (termen execu»õie)
    if ETA_REGEX.search(text):
        intents.append(('eta', lang))
    
    # 4. DetecteazƒÉ platƒÉ/achitare
    if PAYMENT_REGEX.search(text) or ADVANCE_REGEX.search(text) or ADVANCE_AMOUNT_REGEX.search(text) or ADVANCE_METHOD_REGEX.search(text):
        intents.append(('payment', lang))
    
    # 5. DetecteazƒÉ follow-up (mƒÉ g√¢ndesc/revin)
    if FOLLOWUP_REGEX.search(text):
        intents.append(('followup', lang))
    
    # 6. DetecteazƒÉ mul»õumire
    if THANK_YOU_REGEX.search(text):
        intents.append(('thank_you', lang))
    
    # 7. DetecteazƒÉ rƒÉmas bun
    if GOODBYE_REGEX.search(text):
        intents.append(('goodbye', lang))
    
    app.logger.info("[MULTI_INTENT_DETECTED] sender=%s text=%r intents=%s", sender_id, text, intents)
    return intents

def _order_intents_by_text_position(intents: list[tuple[str, str]], text: str) -> list[tuple[str, str]]:
    """
    OrdoneazƒÉ inten»õiile √Æn func»õie de ordinea √Æn care apar √Æn text.
    ReturneazƒÉ o listƒÉ ordonatƒÉ de (intent_type, language).
    """
    if not intents or not text:
        return intents
    
    # Definim pattern-urile pentru fiecare tip de inten»õie
    intent_patterns = {
        'offer': [
            r'\bpre»õul?\b', r'\bpre»õuri\b', r'\baflu\b', r'\bafla\b',  # Romanian
            r'\b—Ü–µ–Ω–∞\b', r'\b—Å—Ç–æ–∏–º–æ—Å—Ç—å\b', r'\b—É–∑–Ω–∞—Ç—å\s+—Ü–µ–Ω—É\b'  # Russian
        ],
        'eta': [
            r'\btermenii\s+de\s+realizare\b', r'\btermenii\s+de\s+executare\b', 
            r'\btimp\s+de\s+realizare\b', r'\bduratƒÉ?\s+de\s+realizare\b',
            r'\b√Æn\s+cat\s+timp\b', r'\bpoate\s+fi\s+gata\b',  # Romanian
            r'\b—Å—Ä–æ–∫\b', r'\b–≤—Ä–µ–º—è\s+–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\b', r'\b—Å–∫–æ–ª—å–∫–æ\s+–≤—Ä–µ–º–µ–Ω–∏\b'  # Russian
        ],
        'delivery': [
            r'\blivrarea\b', r'\blivrare\b', r'\blivrƒÉm\b', r'\btransport\b',
            r'\bcum\s+se\s+face\s+livrarea\b',  # Romanian
            r'\b–¥–æ—Å—Ç–∞–≤–∫–∞\b', r'\b–¥–æ—Å—Ç–∞–≤–ª—è–µ–º\b', r'\b—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\b'  # Russian
        ],
        'payment': [
            r'\bachit\b', r'\bplat[ƒÉa]\b', r'\bplƒÉtesc\b', r'\bavans\b',  # Romanian
            r'\b–æ–ø–ª–∞—Ç–∞\b', r'\b–ø–ª–∞—á—É\b', r'\b–∞–≤–∞–Ω—Å\b', r'\b–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞\b'  # Russian
        ],
        'followup': [
            r'\bmƒÉ\s+g√¢ndesc\b', r'\brevin\b', r'\bmai\s+t√¢rziu\b',  # Romanian
            r'\b–¥—É–º–∞—é\b', r'\b–≤–µ—Ä–Ω—É—Å—å\b', r'\b–ø–æ–∑–∂–µ\b'  # Russian
        ],
        'thank_you': [
            r'\bmul»õumesc\b', r'\bmerci\b',  # Romanian
            r'\b—Å–ø–∞—Å–∏–±–æ\b', r'\b–±–ª–∞–≥–æ–¥–∞—Ä—é\b'  # Russian
        ],
        'goodbye': [
            r'\bla\s+revedere\b', r'\bpa\b', r'\bciao\b',  # Romanian
            r'\b–¥–æ\s+—Å–≤–∏–¥–∞–Ω–∏—è\b', r'\b–ø–æ–∫–∞\b'  # Russian
        ]
    }
    
    # GƒÉsim pozi»õia primei apari»õii pentru fiecare inten»õie √Æn text
    intent_positions = []
    
    for intent_type, lang in intents:
        patterns = intent_patterns.get(intent_type, [])
        earliest_position = float('inf')
        
        for pattern in patterns:
            try:
                match = re.search(pattern, text, re.IGNORECASE)
                if match and match.start() < earliest_position:
                    earliest_position = match.start()
            except re.error:
                # IgnorƒÉ pattern-uri invalide
                continue
        
        # DacƒÉ nu gƒÉsim pattern, folosim pozi»õia 0 pentru a pƒÉstra ordinea originalƒÉ
        if earliest_position == float('inf'):
            earliest_position = 0
            
        intent_positions.append((earliest_position, intent_type, lang))
    
    # SortƒÉm dupƒÉ pozi»õie »ôi returnƒÉm doar inten»õiile
    intent_positions.sort(key=lambda x: x[0])
    ordered_intents = [(intent_type, lang) for _, intent_type, lang in intent_positions]
    
    app.logger.info("[INTENT_ORDERING] original=%s ordered=%s", intents, ordered_intents)
    return ordered_intents

def _handle_multiple_intents(sender_id: str, intents: list[tuple[str, str]], text: str, delay_seconds: float = 0.0) -> None:
    """
    ProceseazƒÉ multiple inten»õii »ôi trimite rƒÉspunsurile corespunzƒÉtoare.
    Folose»ôte logica originalƒÉ de anti-spam pentru fiecare tip de inten»õie.
    OrdoneazƒÉ rƒÉspunsurile √Æn func»õie de ordinea √Æn care inten»õiile apar √Æn text.
    """
    if not intents:
        return
    
    app.logger.info("[MULTI_INTENT_PROCESSING] sender=%s intents=%s", sender_id, intents)
    
    # OrdoneazƒÉ inten»õiile √Æn func»õie de ordinea √Æn care apar √Æn text
    ordered_intents = _order_intents_by_text_position(intents, text)
    
    for intent_type, lang in ordered_intents:
        try:
            if intent_type == 'offer':
                # Folose»ôte logica originalƒÉ pentru ofertƒÉ
                if _should_send_offer(sender_id):
                    offer = OFFER_TEXT_RU if lang == "RU" else OFFER_TEXT_RO
                    _send_dm_delayed(sender_id, offer[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_OFFER] sender=%s lang=%s", sender_id, lang)
                    
                    # Galeria de imagini pentru ofertƒÉ
                    if not GALLERY_SENT.get(sender_id):
                        media_list = OFFER_MEDIA_RU if lang == "RU" else OFFER_MEDIA_RO
                        if PUBLIC_BASE_URL.startswith("https://") and all(u.endswith((".jpg",".jpeg",".png",".webp")) for u in media_list):
                            GALLERY_SENT[sender_id] = True
                            _send_images_delayed(sender_id, media_list, seconds=random.uniform(0.8, 1.6))
            
            elif intent_type == 'delivery':
                # Folose»ôte logica originalƒÉ pentru livrare
                if _should_send_delivery(sender_id, text):
                    msg_del = DELIVERY_TEXT_RU if lang == "RU" else DELIVERY_TEXT
                    _send_dm_delayed(sender_id, msg_del[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_DELIVERY] sender=%s lang=%s", sender_id, lang)
            
            elif intent_type == 'location_delivery':
                # Folose»ôte logica pentru livrare cu loca»õie specificƒÉ
                location_result = _should_send_location_delivery(sender_id, text)
                if location_result:
                    location_category, location_lang = location_result
                    if location_category == "CHISINAU":
                        msg_del = LOCATION_DELIVERY_CHISINAU
                    elif location_category == "BALTI":
                        msg_del = LOCATION_DELIVERY_BALTI
                    elif location_category == "OTHER_MD":
                        msg_del = LOCATION_DELIVERY_OTHER_MD
                    else:
                        continue  # Nu ar trebui sƒÉ se √Ænt√¢mple
                    
                    _send_dm_delayed(sender_id, msg_del[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_LOCATION_DELIVERY] sender=%s location=%s lang=%s", sender_id, location_category, location_lang)
            
            elif intent_type == 'eta':
                # Folose»ôte logica originalƒÉ pentru ETA
                if _should_send_eta(sender_id, text):
                    msg_eta = ETA_TEXT_RU if lang == "RU" else ETA_TEXT
                    _send_dm_delayed(sender_id, msg_eta[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_ETA] sender=%s lang=%s", sender_id, lang)
            
            elif intent_type == 'payment':
                # Folose»ôte logica originalƒÉ pentru platƒÉ
                if _should_send_payment(sender_id, text):
                    msg_pay = _select_payment_message(lang, text)
                    _send_dm_delayed(sender_id, msg_pay[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_PAYMENT] sender=%s lang=%s", sender_id, lang)
            
            elif intent_type == 'followup':
                # Folose»ôte logica originalƒÉ pentru follow-up
                if _should_send_followup(sender_id, text):
                    reply = FOLLOWUP_TEXT_RU if lang == "RU" else FOLLOWUP_TEXT_RO
                    _send_dm_delayed(sender_id, reply[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_FOLLOWUP] sender=%s lang=%s", sender_id, lang)
            
            elif intent_type == 'thank_you':
                # Folose»ôte logica originalƒÉ pentru mul»õumire
                if _should_send_thank_you(sender_id, text):
                    reply = THANK_YOU_TEXT_RU if lang == "RU" else THANK_YOU_TEXT
                    _send_dm_delayed(sender_id, reply[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_THANK_YOU] sender=%s lang=%s", sender_id, lang)
            
            elif intent_type == 'goodbye':
                # Folose»ôte logica originalƒÉ pentru rƒÉmas bun
                if _should_send_goodbye(sender_id, text):
                    reply = GOODBYE_TEXT_RU if lang == "RU" else GOODBYE_TEXT
                    _send_dm_delayed(sender_id, reply[:900], seconds=delay_seconds)
                    app.logger.info("[MULTI_INTENT_GOODBYE] sender=%s lang=%s", sender_id, lang)
                    
        except Exception as e:
            app.logger.exception("Failed to process multi-intent %s for sender %s: %s", intent_type, sender_id, e)

def _iter_message_events(payload: Dict) -> Iterable[Tuple[str, Dict]]:
    """
    NormalizeazƒÉ doar mesajele (NU comentariile).
    - Messenger: entry[].messaging[].message
    - Instagram Graph changes: entry[].changes[] cu value.messages[] DAR field != "comments"
    Yield: (sender_id, msg_dict)
    """
    # Messenger
    for entry in payload.get("entry", []):
        for item in entry.get("messaging", []) or []:
            sender_id = (item.get("sender") or {}).get("id")
            msg = item.get("message") or {}
            if not sender_id or not isinstance(msg, dict):
                continue
            if ("text" in msg) or ("attachments" in msg) or ("quick_reply" in msg):
                yield sender_id, msg

    # Instagram Graph (doar messages, evitƒÉm field == 'comments')
    for entry in payload.get("entry", []):
        for ch in entry.get("changes", []) or []:
            if ch.get("field") == "comments":
                continue  # skip aici; comentariile sunt tratate separat
            val = ch.get("value") or {}
            for msg in val.get("messages", []) or []:
                if not isinstance(msg, dict):
                    continue
                from_field = msg.get("from") or val.get("from") or {}
                sender_id = from_field.get("id") if isinstance(from_field, dict) else from_field
                if not sender_id:
                    continue
                # normalize attachments
                attachments = None
                if isinstance(msg.get("attachments"), list):
                    attachments = msg["attachments"]
                elif isinstance(msg.get("attachments"), dict):
                    attachments = [msg["attachments"]]
                elif isinstance(msg.get("message"), dict):
                    inner = msg["message"]
                    if isinstance(inner.get("attachments"), list):
                        attachments = inner["attachments"]
                    elif isinstance(inner.get("attachments"), dict):
                        attachments = [inner["attachments"]]
                if attachments is not None:
                    msg = dict(msg)
                    msg["attachments"] = attachments

                if ("text" in msg) or ("attachments" in msg) or ("quick_reply" in msg):
                    yield sender_id, msg

def _is_ru_text(text: str) -> bool:
    return bool(CYRILLIC_RE.search(text or ""))

def _clean_emoji_for_matching(text: str) -> str:
    """
    Remove emojis and extra whitespace from text for better pattern matching.
    """
    if not text:
        return ""
    
    # Remove emojis (comprehensive emoji ranges)
    import re
    # Remove common emoji ranges and variation selectors
    text = re.sub(r'[\U0001F600-\U0001F64F]', '', text)  # Emoticons
    text = re.sub(r'[\U0001F300-\U0001F5FF]', '', text)  # Misc Symbols and Pictographs
    text = re.sub(r'[\U0001F680-\U0001F6FF]', '', text)  # Transport and Map
    text = re.sub(r'[\U0001F1E0-\U0001F1FF]', '', text)  # Regional indicator symbols
    text = re.sub(r'[\U00002600-\U000026FF]', '', text)  # Miscellaneous symbols
    text = re.sub(r'[\U00002700-\U000027BF]', '', text)  # Dingbats
    text = re.sub(r'[\U0001F900-\U0001F9FF]', '', text)  # Supplemental Symbols and Pictographs
    text = re.sub(r'[\U0001FA70-\U0001FAFF]', '', text)  # Symbols and Pictographs Extended-A
    text = re.sub(r'[\U0000FE00-\U0000FE0F]', '', text)  # Variation Selectors
    text = re.sub(r'[\U0000200D]', '', text)  # Zero Width Joiner
    
    # Clean up extra whitespace
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# Normalizare RO (fƒÉrƒÉ diacritice)
_DIAC_MAP = str.maketrans({"ƒÉ":"a","√¢":"a","√Æ":"i","»ô":"s","≈£":"t","»õ":"t",
                           "ƒÇ":"a","√Ç":"a","√é":"i","»ò":"s","≈¢":"t","»ö":"t"})
def _norm_ro(s: str) -> str:
    s = (s or "").lower().translate(_DIAC_MAP)
    s = re.sub(r"[^\w\s]", " ", s)   
    s = re.sub(r"\s+", " ", s).strip()
    return s


def _detect_offer_lang(text: str) -> str | None:
    """
    'RO' / 'RU' dacƒÉ mesajul indicƒÉ inten»õie de ofertƒÉ (pre»õ/cataloage/detalii).
    Reguli:
      1) Match direct pe expresii compuse (RO_PRICE_REGEX / RU_PRICE_REGEX)
      2) Scor lexiconic clasic: (PRICE ‚à™ DETAIL) + PRODUCT
      3) Fallback-uri prietenoase pentru mesaje scurte / √ÆntrebƒÉri simple:
         - doar PRODUCT (ex: "modele?", "catalog") -> ofertƒÉ
         - doar PRICE (ex: "c√¢t costƒÉ?", "—Ü–µ–Ω–∞?")  -> ofertƒÉ
    """
    if not text or not text.strip():
        return None

    has_cyr = bool(CYRILLIC_RE.search(text))
    low = (text or "").lower()
    low_clean = re.sub(r"[^\w\s]", " ", low)

    # RO normalize (fƒÉrƒÉ diacritice) + tokenizare
    ro_norm = _norm_ro(text)
    ro_toks = set(ro_norm.split())

    # RU tokenizare simplƒÉ
    ru_toks = set(low_clean.split())

    # 1) Expresii compuse ‚Äì ancore clare
    if has_cyr and RU_PRICE_REGEX.search(low):
        return "RU"
    if (not has_cyr) and RO_PRICE_REGEX.search(text):
        return "RO"

    # C√¢te cuvinte are mesajul (dupƒÉ normalizare)
    word_count = len((low_clean if has_cyr else ro_norm).split())

    # √éntrebƒÉri scurte de pre»õ (ex: "—Ü–µ–Ω–∞?", "c√¢t costƒÉ?")
    if not has_cyr and _SHORT_PRICE_RO.search(text) and ("?" in text or word_count <= 4):
        return "RO"
    if has_cyr and _SHORT_PRICE_RU.search(low) and ("?" in text or word_count <= 4):
        return "RU"

    # 2) Scor lexiconic clasic: (PRICE ‚à™ DETAIL) + PRODUCT
    ro_has_price_or_detail = bool(ro_toks & (RO_PRICE_TERMS | RO_DETAIL_TERMS))
    ro_has_product         = bool(ro_toks & RO_PRODUCT_TERMS)

    ru_has_price_or_detail = bool(ru_toks & (RU_PRICE_TERMS | RU_DETAIL_TERMS))
    ru_has_product         = bool(ru_toks & RU_PRODUCT_TERMS)

    if has_cyr:
        if ru_has_price_or_detail and ru_has_product:
            return "RU"
    else:
        if ro_has_price_or_detail and ro_has_product:
            return "RO"

    # 3) Fallback-uri prietenoase pentru mesaje scurte / cu semnul √ÆntrebƒÉrii

    # ‚Äî doar PRODUCT (modele/catalog) => ofertƒÉ
    if not has_cyr and (ro_has_product) and (word_count <= 5 or "?" in text):
        return "RO"
    if has_cyr and (ru_has_product) and (word_count <= 6 or "?" in text):
        return "RU"

    # ‚Äî doar PRICE/DETAIL, dacƒÉ e √Æntrebare scurtƒÉ (ex: "»ôi c√¢t costƒÉ?")
    if not has_cyr and ro_has_price_or_detail and (word_count <= 5 or "?" in text):
        return "RO"
    if has_cyr and ru_has_price_or_detail and (word_count <= 6 or "?" in text):
        return "RU"

    # Ultima plasƒÉ: ‚Äûdetalii?/–ø–æ–¥—Ä–æ–±–Ω–µ–µ?‚Äù
    if (ro_toks & RO_DETAIL_TERMS) and ("?" in text or ro_has_product):
        return "RO"
    if (ru_toks & RU_DETAIL_TERMS) and ("?" in text or ru_has_product):
        return "RU"

    return None


def _detect_location(text: str) -> str | None:
    """
    DetecteazƒÉ loca»õia din text »ôi returneazƒÉ categoria corespunzƒÉtoare.
    ReturneazƒÉ: 'CHISINAU', 'BALTI', 'OTHER_MD', sau None dacƒÉ nu se detecteazƒÉ loca»õia.
    """
    if not text:
        return None
    
    # NormalizeazƒÉ textul pentru matching mai bun
    text_lower = text.lower().strip()
    
    # VerificƒÉ Chi»ôinƒÉu (prioritate √ÆnaltƒÉ)
    if CHISINAU_REGEX.search(text_lower):
        return "CHISINAU"
    
    # VerificƒÉ BƒÉl»õi (prioritate √ÆnaltƒÉ)
    if BALTI_REGEX.search(text_lower):
        return "BALTI"
    
    # VerificƒÉ alte localitƒÉ»õi din Moldova
    if OTHER_MD_REGEX.search(text_lower):
        return "OTHER_MD"
    
    return None

def _should_send_location_delivery(sender_id: str, text: str) -> tuple[str, str] | None:
    """
    DetecteazƒÉ dacƒÉ mesajul con»õine o loca»õie »ôi √ÆntreabƒÉ despre livrare.
    ReturneazƒÉ (location_category, language) dacƒÉ trebuie sƒÉ trimitƒÉ mesaj specific loca»õiei.
    Altfel None.
    """
    if not text:
        return None
    
    # DetecteazƒÉ loca»õia PRIMUL
    location = _detect_location(text)
    if not location:
        return None
    
    # VerificƒÉ dacƒÉ mesajul √ÆntreabƒÉ despre livrare SAU este o √Æntrebare despre loca»õie
    delivery_keywords = [
        'livrare', 'livra»õi', 'livrarea', 'livrƒÉm', 'transport', 'curier', 'po»ôtƒÉ',
        'dacƒÉ', 'daca', 'dacƒÉ mƒÉ', 'daca ma', 'dacƒÉ sunt', 'daca sunt', 
        'dacƒÉ mƒÉ aflu', 'daca ma aflu', 'cum se face', 'cum se', 'cum poate',
        '√Æn', 'la', 'pentru', 'va trebui', 'trebui', 'livrat', 'produsul',
        'comanda', 'comandƒÉ', 'satul', 'ora»ôul', 'raionul', 'r.', 'mun.', 'or.',
        'mƒÉ aflu', 'ma aflu', 'sunt', 'locuiesc', 'stau', 'mƒÉ gƒÉsesc', 'ma gasesc'
    ]
    
    # Pentru loca»õii, permite trigger-ul automat fƒÉrƒÉ cuvinte cheie explicite de livrare
    # dacƒÉ mesajul con»õine o loca»õie specificƒÉ
    has_delivery_intent = (
        DELIVERY_REGEX.search(text) or 
        any(keyword in text.lower() for keyword in delivery_keywords) or
        # Trigger automat pentru orice men»õiune de loca»õie
        True  # Orice loca»õie detectatƒÉ va declan»ôa rƒÉspunsul
    )
    
    if not has_delivery_intent:
        return None
    
    # VerificƒÉ anti-spam: dacƒÉ am trimis deja un mesaj pentru aceastƒÉ loca»õie
    # PERMITE √ÆntrebƒÉri despre loca»õii diferite
    last_location = LOCATION_DELIVERY_REPLIED.get(sender_id)
    if last_location == location:
        return None
    
    # SeteazƒÉ flag-ul pentru aceastƒÉ loca»õie
    LOCATION_DELIVERY_REPLIED[sender_id] = location
    
    # DeterminƒÉ limba
    language = "RU" if CYRILLIC_RE.search(text) else "RO"
    
    return (location, language)

def _should_send_delivery(sender_id: str, text: str) -> str | None:
    """
    ReturneazƒÉ 'RU' sau 'RO' dacƒÉ mesajul √ÆntreabƒÉ despre livrare
    »ôi nu am rƒÉspuns √ÆncƒÉ √Æn conversa»õia curentƒÉ. Altfel None.
    """
    if not text:
        return None
    if DELIVERY_REGEX.search(text):
        if DELIVERY_REPLIED.get(sender_id):
            return None
        DELIVERY_REPLIED[sender_id] = True
        return "RU" if CYRILLIC_RE.search(text) else "RO"
    return None

def _should_send_eta(sender_id: str, text: str) -> str | None:
    """
    ReturneazƒÉ 'RU' sau 'RO' dacƒÉ mesajul √ÆntreabƒÉ despre termenul de executare
    »ôi nu am rƒÉspuns √ÆncƒÉ √Æn conversa»õia curentƒÉ. Altfel None.
    """
    if not text:
        return None
    if ETA_REGEX.search(text):
        if ETA_REPLIED.get(sender_id):
            return None
        ETA_REPLIED[sender_id] = True
        return "RU" if CYRILLIC_RE.search(text) else "RO"
    return None

def _should_send_followup(sender_id: str, text: str) -> str | None:
    """
    ReturneazƒÉ 'RO' sau 'RU' dacƒÉ mesajul e de tip 'mƒÉ g√¢ndesc/revin'.
    AsigurƒÉ o singurƒÉ trimitere per conversa»õie (anti-spam).
    """
    if not text:
        return None
    if FOLLOWUP_REGEX.search(text):
        if FOLLOWUP_REPLIED.get(sender_id):
            return None
        FOLLOWUP_REPLIED[sender_id] = True
        # limbƒÉ: dacƒÉ textul con»õine chirilice -> RU
        return "RU" if CYRILLIC_RE.search(text) else "RO"
    return None

def _should_send_thank_you(sender_id: str, text: str) -> str | None:
    """
    ReturneazƒÉ 'RO' sau 'RU' dacƒÉ mesajul con»õine expresii de mul»õumire.
    AsigurƒÉ o singurƒÉ trimitere per conversa»õie (anti-spam).
    """
    if not text:
        return None
    
    # Clean emojis from text for better pattern matching
    clean_text = _clean_emoji_for_matching(text)
    
    if THANK_YOU_REGEX.search(clean_text):
        if THANK_YOU_REPLIED.get(sender_id):
            return None
        THANK_YOU_REPLIED[sender_id] = True
        # limbƒÉ: dacƒÉ textul con»õine chirilice -> RU
        return "RU" if CYRILLIC_RE.search(text) else "RO"
    return None

def _should_send_goodbye(sender_id: str, text: str) -> str | None:
    """
    ReturneazƒÉ 'RO' sau 'RU' dacƒÉ mesajul con»õine expresii de rƒÉmas bun.
    AsigurƒÉ o singurƒÉ trimitere per conversa»õie (anti-spam).
    """
    if not text:
        return None
    if GOODBYE_REGEX.search(text):
        if GOODBYE_REPLIED.get(sender_id):
            return None
        GOODBYE_REPLIED[sender_id] = True
        # limbƒÉ: dacƒÉ textul con»õine chirilice -> RU
        return "RU" if CYRILLIC_RE.search(text) else "RO"
    return None

def _send_dm_delayed(recipient_id: str, text: str, seconds: float | None = None) -> None:
    """
    Trimite DM cu √Ænt√¢rziere fƒÉrƒÉ sƒÉ blocheze webhook-ul.
    Nu atinge antispam-ul: tu chemi func»õia DOAR dupƒÉ ce ai trecut de guard-urile _should_*.
    """
    delay = seconds if seconds is not None else random.uniform(REPLY_DELAY_MIN_SEC, REPLY_DELAY_MAX_SEC)

    def _job():
        try:
            send_instagram_message(recipient_id, text[:900])
        except Exception as e:
            app.logger.exception("Delayed DM failed: %s", e)

    t = threading.Timer(delay, _job)
    t.daemon = True  # nu »õine procesul √Æn via»õƒÉ la shutdown
    t.start()

def _send_images_delayed(recipient_id: str, urls: list[str], seconds: float | None = None) -> None:
    """
    Trimite galeria de imagini cu √Ænt√¢rziere fƒÉrƒÉ sƒÉ blocheze webhook-ul.
    """
    delay = seconds if seconds is not None else random.uniform(0.8, 1.6)

    def _job():
        try:
            send_instagram_images(recipient_id, urls)
        except Exception as e:
            app.logger.exception("Delayed images failed: %s", e)

    t = threading.Timer(delay, _job)
    t.daemon = True  # nu »õine procesul √Æn via»õƒÉ la shutdown
    t.start()

def _should_send_payment(sender_id: str, text: str) -> str | None:
    """
    'RU' / 'RO' dacƒÉ mesajul √ÆntreabƒÉ despre platƒÉ/avans (inclusiv SUMƒÇ sau METODƒÇ),
    cu anti-spam specific pe tip de √Æntrebare. Altfel None.
    """
    if not text:
        return None

    now = time.time()
    # curƒÉ»õare TTL pentru toate tipurile
    for uid, ts in list(PAYMENT_GENERAL_REPLIED.items()):
        if now - ts > PAYMENT_TTL_SEC:
            PAYMENT_GENERAL_REPLIED.pop(uid, None)
    for uid, ts in list(ADVANCE_AMOUNT_REPLIED.items()):
        if now - ts > PAYMENT_TTL_SEC:
            ADVANCE_AMOUNT_REPLIED.pop(uid, None)
    for uid, ts in list(ADVANCE_METHOD_REPLIED.items()):
        if now - ts > PAYMENT_TTL_SEC:
            ADVANCE_METHOD_REPLIED.pop(uid, None)

    # VerificƒÉ tipul de √Æntrebare »ôi anti-spam specific (ordinea conteazƒÉ!)
    if ADVANCE_AMOUNT_REGEX.search(text):
        # √éntrebare despre SUMA avansului (prioritate √ÆnaltƒÉ)
        last = ADVANCE_AMOUNT_REPLIED.get(sender_id, 0.0)
        if now - last < PAYMENT_TTL_SEC:
            return None
        ADVANCE_AMOUNT_REPLIED[sender_id] = now
        app.logger.info("[ADVANCE_AMOUNT_MATCH] sender=%s text=%r", sender_id, text)
        return "RU" if CYRILLIC_RE.search(text) else "RO"
    
    elif ADVANCE_METHOD_REGEX.search(text):
        # √éntrebare despre METODA de achitare (prioritate √ÆnaltƒÉ)
        last = ADVANCE_METHOD_REPLIED.get(sender_id, 0.0)
        if now - last < PAYMENT_TTL_SEC:
            return None
        ADVANCE_METHOD_REPLIED[sender_id] = now
        app.logger.info("[ADVANCE_METHOD_MATCH] sender=%s text=%r", sender_id, text)
        return "RU" if CYRILLIC_RE.search(text) else "RO"
    
    elif PAYMENT_REGEX.search(text) or ADVANCE_REGEX.search(text):
        # √éntrebare generalƒÉ despre platƒÉ/avans (prioritate joasƒÉ)
        last = PAYMENT_GENERAL_REPLIED.get(sender_id, 0.0)
        if now - last < PAYMENT_TTL_SEC:
            return None
        PAYMENT_GENERAL_REPLIED[sender_id] = now
        app.logger.info("[PAYMENT_GENERAL_MATCH] sender=%s text=%r", sender_id, text)
        return "RU" if CYRILLIC_RE.search(text) else "RO"

    return None



# ---------- Routes ----------
@app.get("/health")
def health():
    return {"ok": True}, 200

# Handshake (GET /webhook)
@app.get("/webhook")
def verify_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        return challenge, 200
    return "Forbidden", 403

# Evenimente (POST /webhook): trateazƒÉ »ôi mesaje, »ôi comentarii
@app.post("/webhook")
def webhook():
    # (op»õional) verificare semnƒÉturƒÉ
    if not _verify_signature():
        app.logger.error("Invalid X-Hub-Signature-256")
        abort(403)

    data = request.get_json(force=True, silent=True) or {}
    app.logger.info("Incoming webhook: %s", json.dumps(data, ensure_ascii=False))

    # --- 1) Fluxul de COMENTARII (exact ca p√¢nƒÉ acum) ---
    for entry in data.get("entry", []):
        for change in entry.get("changes", []):
            if change.get("field") != "comments":
                continue  # ignorƒÉm ce nu e ‚Äûcomments‚Äù aici

            value = change.get("value", {}) or {}
            comment_id = value.get("id") or value.get("comment_id")
            text = value.get("text", "") or ""
            from_user = (value.get("from") or {}).get("id")

            app.logger.info(f"[DEBUG] Comment {comment_id} from user: {from_user}")

            # evitƒÉm self-replies - verificare √ÆmbunƒÉtƒÉ»õitƒÉ
            if from_user and MY_IG_USER_ID:
                if str(from_user) == str(MY_IG_USER_ID):
                    app.logger.info(f"[COMMENT_SKIP] Skipping comment from self (user_id: {from_user})")
                    continue
                # Verificare suplimentarƒÉ pentru ID-uri care se pot reprezenta diferit
                try:
                    from_user_int = int(from_user)
                    my_id_int = int(MY_IG_USER_ID)
                    if from_user_int == my_id_int:
                        app.logger.info(f"[COMMENT_SKIP] Skipping comment from self (numeric match: {from_user})")
                        continue
                except (ValueError, TypeError):
                    pass  # continuƒÉ cu verificarea normalƒÉ
            if not comment_id:
                continue

            # DEDUP comentarii
            now = time.time()
            # curƒÉ»õare TTL
            for old_cid, ts in list(PROCESSED_COMMENTS.items()):
                if now - ts > COMMENT_TTL:
                    del PROCESSED_COMMENTS[old_cid]
            if comment_id in PROCESSED_COMMENTS:
                app.logger.info(f"[comments] Comment {comment_id} already processed, skipping")
                continue
            PROCESSED_COMMENTS[comment_id] = now
            app.logger.info(f"[comments] Processing new comment {comment_id}")

            # VerificƒÉ dacƒÉ comentariul con»õine intent de pre»õ
            has_price_intent = COMMENT_PRICE_REGEX.search(text)
            
            if not has_price_intent:
                app.logger.info(f"[COMMENT_SKIP] Comment {comment_id} has no price intent, skipping auto-reply")
                continue

            # 1) rƒÉspuns public scurt (RO/RU) - DOAR pentru comentarii cu intent de pre»õ
            lang_ru = _is_ru_text(text)
            ack = ACK_PUBLIC_RU if lang_ru else ACK_PUBLIC_RO
            try:
                result = reply_public_to_comment(comment_id, ack)
                if isinstance(result, dict) and result.get("success") is False:
                    app.logger.info(f"[comments] Public reply not supported for {comment_id}, continue with private message")
            except Exception:
                app.logger.exception(f"[comments] Public reply failed for {comment_id}")

    # --- 2) Fluxul de MESAJE (DM) ‚Äî trigger ofertƒÉ + anti-spam ---
    for sender_id, msg in _iter_message_events(data):
        if msg.get("is_echo"):
            continue
        
        # evitƒÉm self-replies pentru DM-uri
        if sender_id and MY_IG_USER_ID:
            if str(sender_id) == str(MY_IG_USER_ID):
                app.logger.info(f"[DM_SKIP] Skipping DM from self (sender_id: {sender_id})")
                continue
            # Verificare suplimentarƒÉ pentru ID-uri care se pot reprezenta diferit
            try:
                sender_id_int = int(sender_id)
                my_id_int = int(MY_IG_USER_ID)
                if sender_id_int == my_id_int:
                    app.logger.info(f"[DM_SKIP] Skipping DM from self (numeric match: {sender_id})")
                    continue
            except (ValueError, TypeError):
                pass  # continuƒÉ cu verificarea normalƒÉ

        mid = msg.get("mid") or msg.get("id")
        if mid and _is_duplicate_mid(mid):
            continue

        text_in = (
            (msg.get("text"))
            or ((msg.get("message") or {}).get("text"))
            or ""
        ).strip()

        attachments = msg.get("attachments") if isinstance(msg.get("attachments"), list) else []
        app.logger.info("EVENT sender=%s text=%r attachments=%d", sender_id, text_in, len(attachments))

        # === Customer capture integration (non-blocking) ===
        if CUSTOMER_CAPTURE_ENABLED and text_in:
            try:
                process_customer_message(platform_user_id=sender_id, text=text_in)
            except Exception as e:
                app.logger.warning(f"[CUSTOMER_CAPTURE] Error processing message: {e}")

        # --- GREETING (salutul ini»õial) ‚Äî rƒÉspunde DOAR o datƒÉ per conversa»õie ---
        # VerificƒÉ dacƒÉ trebuie sƒÉ trimitƒÉ salutul automat
        lang_greeting = _should_send_greeting(sender_id, text_in)
        if lang_greeting:
            try:
                greeting_msg = GREETING_TEXT_RU if lang_greeting == "RU" else GREETING_TEXT_RO
                # Send greeting IMMEDIATELY (no delay) to ensure it's first
                _send_dm_delayed(sender_id, greeting_msg, seconds=0.1)
                app.logger.info("[GREETING_SENT] sender=%s lang=%s", sender_id, lang_greeting)
            except Exception as e:
                app.logger.exception("Failed to schedule greeting: %s", e)
            # Nu continue aici - vrem sƒÉ proceseze »ôi alte inten»õii dupƒÉ salut

        # --- MULTI-INTENT DETECTION ---
        # DetecteazƒÉ toate inten»õiile din mesaj »ôi proceseazƒÉ-le
        detected_intents = _detect_multiple_intents(sender_id, text_in)
        if detected_intents:
            # Add small delay to ensure greeting is sent first
            _handle_multiple_intents(sender_id, detected_intents, text_in, delay_seconds=0.5)
            continue

        # --- FALLBACK: Original single-intent detection ---
        # DacƒÉ multi-intent nu detecteazƒÉ nimic, folose»ôte logica originalƒÉ
        
        # --- ETA (timp execu»õie) ‚Äî rƒÉspunde DOAR o datƒÉ per user ---
        lang_eta = _should_send_eta(sender_id, text_in)
        if lang_eta:
            try:
                msg_eta = ETA_TEXT_RU if lang_eta == "RU" else ETA_TEXT
                _send_dm_delayed(sender_id, msg_eta[:900])   
            except Exception as e:
                app.logger.exception("Failed to schedule ETA reply: %s", e)
            continue

        # --- LIVRARE (o singurƒÉ datƒÉ) ---
        # VerificƒÉ mai √Ænt√¢i dacƒÉ are loca»õie specificƒÉ
        location_result = _should_send_location_delivery(sender_id, text_in)
        if location_result:
            try:
                location_category, location_lang = location_result
                if location_category == "CHISINAU":
                    msg_del = LOCATION_DELIVERY_CHISINAU
                elif location_category == "BALTI":
                    msg_del = LOCATION_DELIVERY_BALTI
                elif location_category == "OTHER_MD":
                    msg_del = LOCATION_DELIVERY_OTHER_MD
                else:
                    # Fallback la livrare generalƒÉ
                    lang_del = _should_send_delivery(sender_id, text_in)
                    if lang_del:
                        msg_del = DELIVERY_TEXT_RU if lang_del == "RU" else DELIVERY_TEXT
                    else:
                        continue
                
                _send_dm_delayed(sender_id, msg_del[:900])
                app.logger.info("[LOCATION_DELIVERY_SENT] sender=%s location=%s", sender_id, location_category)
            except Exception as e:
                app.logger.exception("Failed to schedule location delivery reply: %s", e)
            continue
        
        # Fallback la livrare generalƒÉ dacƒÉ nu are loca»õie specificƒÉ
        lang_del = _should_send_delivery(sender_id, text_in)
        if lang_del:
            try:
                msg_del = DELIVERY_TEXT_RU if lang_del == "RU" else DELIVERY_TEXT
                _send_dm_delayed(sender_id, msg_del[:900])   
            except Exception as e:
                app.logger.exception("Failed to schedule delivery reply: %s", e)
            continue

        # --- FOLLOW-UP ‚Äî rƒÉspunde DOAR o datƒÉ ---
        lang_followup = _should_send_followup(sender_id, text_in)
        if lang_followup:
            reply = FOLLOWUP_TEXT_RU if lang_followup == "RU" else FOLLOWUP_TEXT_RO
            try:
                _send_dm_delayed(sender_id, reply[:900])     
            except Exception as e:
                app.logger.exception("Failed to schedule follow-up reply: %s", e)
            continue

        # --- THANK YOU ‚Äî rƒÉspunde DOAR o datƒÉ ---
        lang_thank_you = _should_send_thank_you(sender_id, text_in)
        if lang_thank_you:
            reply = THANK_YOU_TEXT_RU if lang_thank_you == "RU" else THANK_YOU_TEXT
            try:
                _send_dm_delayed(sender_id, reply[:900])     
            except Exception as e:
                app.logger.exception("Failed to schedule thank you reply: %s", e)
            continue

        # --- GOODBYE ‚Äî rƒÉspunde DOAR o datƒÉ ---
        lang_goodbye = _should_send_goodbye(sender_id, text_in)
        if lang_goodbye:
            reply = GOODBYE_TEXT_RU if lang_goodbye == "RU" else GOODBYE_TEXT
            try:
                _send_dm_delayed(sender_id, reply[:900])     
            except Exception as e:
                app.logger.exception("Failed to schedule goodbye reply: %s", e)
            continue

        # --- PLATƒÇ / ACHITARE (o singurƒÉ datƒÉ) ---
        lang_pay = _should_send_payment(sender_id, text_in)
        if lang_pay:
            try:
                msg_pay = _select_payment_message(lang_pay, text_in)
                _send_dm_delayed(sender_id, msg_pay[:900])
            except Exception as e:
                app.logger.exception("Failed to schedule payment/advance reply: %s", e)
            continue

        # Trigger ofertƒÉ (RO/RU) o singurƒÉ datƒÉ per conversa»õie
        lang = _detect_offer_lang(text_in)
        if lang and _should_send_offer(sender_id):
            offer = OFFER_TEXT_RU if lang == "RU" else OFFER_TEXT_RO
            try:
                _send_dm_delayed(sender_id, offer[:900])     
            except Exception as e:
                app.logger.exception("Failed to schedule offer: %s", e)
            
            # Galeria de imagini - o singurƒÉ datƒÉ per conversa»õie
            if not GALLERY_SENT.get(sender_id):
                media_list = OFFER_MEDIA_RU if lang == "RU" else OFFER_MEDIA_RO
                if PUBLIC_BASE_URL.startswith("https://") and all(u.endswith((".jpg",".jpeg",".png",".webp")) for u in media_list):
                    GALLERY_SENT[sender_id] = True  # set BEFORE scheduling
                    _send_images_delayed(sender_id, media_list, seconds=random.uniform(0.8, 1.6))
                else:
                    app.logger.warning("Skipping gallery: invalid PUBLIC_BASE_URL or media list")
            continue
        
        if "?" in text_in and len(text_in) <= 160:
            app.logger.info("[OFFER_INTENT_MISSING] %r", text_in)
        # AICI po»õi adƒÉuga alte fluxuri viitoare, dacƒÉ e cazul
        # (momentan webhook-ul rƒÉm√¢ne minimal pe DM)

    return jsonify({"ok": True}), 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "8080")), debug=False)