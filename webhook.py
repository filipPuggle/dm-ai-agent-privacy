import os
import re
from flask import Flask, request, jsonify
from send_message import reply_public_to_comment, send_private_reply_to_comment

app = Flask(__name__)

# === ENV exact ca √Æn Railway ===
VERIFY_TOKEN = os.getenv("IG_VERIFY_TOKEN", "").strip()
MY_IG_USER_ID = os.getenv("IG_ID", "").strip()

OFFER_TEXT_RO = (
    "Avem modele pentru profesori, personalizabile cu text, care sunt la pre»õ de 650 lei\n\n"
    "Facem »ôi lucrƒÉri la comandƒÉ √Æn baza pozei, la pre»õ de 780 lei\n\n"
    "LƒÉmpile au 16 culori »ôi o telecomandƒÉ √Æn set ü•∞\n\n"
    "Primi»õi 6 luni garan»õie la toatƒÉ electronica‚ö°\n\n"
    "Pentru ce tip de lampƒÉ a»õi opta ?"
)

OFFER_TEXT_RU = (
    "–£ –Ω–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç 650 –ª–µ–π\n\n"
    "–¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 780 –ª–µ–π\n\n"
    "–õ–∞–º–ø—ã –∏–º–µ—é—Ç 16 —Ü–≤–µ—Ç–æ–≤ –∏ –ø—É–ª—å—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ ü•∞\n\n"
    "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 6 –º–µ—Å—è—Ü–µ–≤ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –≤—Å—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É‚ö°\n\n"
    "–ö–∞–∫–æ–π —Ç–∏–ø –ª–∞–º–ø—ã –≤—ã –±—ã –≤—ã–±—Ä–∞–ª–∏?"
)
# === Mesajul public scurt sub comentariu (editabil) ===
ACK_PUBLIC_RO = "BunƒÉ! V-am rƒÉspuns √Æn privat!"
ACK_PUBLIC_RU = "–ü—Ä–∏–≤–µ—Ç! –ú—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"

# === Detec»õie simplƒÉ RU (alfabet chirilic) ===
CYRILLIC_RE = re.compile(r"[–ê-–Ø–∞-—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë]")

def _is_ru(text: str) -> bool:
    return bool(CYRILLIC_RE.search(text or ""))

# === Handshake (GET /webhook) ===
@app.get("/webhook")
def verify_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        return challenge, 200
    return "Forbidden", 403

# === Evenimente (POST /webhook) ‚Äî DOAR fluxul de comentarii ===
@app.post("/webhook")
def webhook():
    data = request.get_json(silent=True) or {}

    for entry in data.get("entry", []):
        for change in entry.get("changes", []):
            if change.get("field") != "comments":
                continue  # ignorƒÉm TOT ce nu e ‚Äûcomments‚Äù

            value = change.get("value", {}) or {}
            comment_id = value.get("id") or value.get("comment_id")
            text = value.get("text", "")
            from_user = (value.get("from") or {}).get("id")

            # evitƒÉm self-replies (comentarii fƒÉcute de propriul cont)
            if from_user and MY_IG_USER_ID and str(from_user) == str(MY_IG_USER_ID):
                continue
            if not comment_id:
                continue

            # 1) rƒÉspuns public scurt (RO/RU)
            lang_ru = _is_ru(text)
            ack = ACK_PUBLIC_RU if lang_ru else ACK_PUBLIC_RO
            try:
                reply_public_to_comment(comment_id, ack)
            except Exception:
                app.logger.exception(f"[comments] Public reply failed for {comment_id}")

            # 2) private reply cu OFERTA (√Ænchidem automatizarea aici; fƒÉrƒÉ alte follow-up-uri)
        offer = OFFER_TEXT_RU if lang_ru else OFFER_TEXT_RO
        try:
            if from_user:
                send_private_reply_to_comment(
                    comment_id,
                    offer,
                    platform="ig",
                    author_igsid=str(from_user),
                )
            else:
                app.logger.warning(f"[comments] LipsƒÉ from.id pentru {comment_id} ‚Äì sar peste DM")
        except Exception:
            app.logger.exception(f"[comments] Private reply failed for {comment_id}")

    # Nu declan»ôƒÉm alte fluxuri, nu trimitem alte mesaje ‚Äî omul preia ulterior
    return jsonify({"ok": True})
